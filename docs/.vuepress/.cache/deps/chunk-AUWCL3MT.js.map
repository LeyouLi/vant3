{
  "version": 3,
  "sources": ["../../../../node_modules/@formily/core/src/shared/checkers.ts", "../../../../node_modules/@formily/core/src/models/index.ts", "../../../../node_modules/@formily/core/src/models/LifeCycle.ts", "../../../../node_modules/@formily/core/src/models/Heart.ts", "../../../../node_modules/@formily/core/src/models/Graph.ts", "../../../../node_modules/@formily/core/src/models/Query.ts", "../../../../node_modules/@formily/validator/src/index.ts", "../../../../node_modules/@formily/validator/src/types.ts", "../../../../node_modules/@formily/validator/src/registry.ts", "../../../../node_modules/@formily/validator/src/template.ts", "../../../../node_modules/@formily/validator/src/parser.ts", "../../../../node_modules/@formily/validator/src/locale.ts", "../../../../node_modules/@formily/validator/src/formats.ts", "../../../../node_modules/@formily/validator/src/rules.ts", "../../../../node_modules/@formily/validator/src/validator.ts", "../../../../node_modules/@formily/core/src/types.ts", "../../../../node_modules/@formily/core/src/shared/externals.ts", "../../../../node_modules/@formily/core/src/shared/constants.ts", "../../../../node_modules/@formily/core/src/shared/effective.ts", "../../../../node_modules/@formily/core/src/shared/internals.ts", "../../../../node_modules/@formily/core/src/models/BaseField.ts", "../../../../node_modules/@formily/core/src/models/Field.ts", "../../../../node_modules/@formily/core/src/models/ArrayField.ts", "../../../../node_modules/@formily/core/src/models/ObjectField.ts", "../../../../node_modules/@formily/core/src/models/VoidField.ts", "../../../../node_modules/@formily/core/src/models/Form.ts", "../../../../node_modules/@formily/core/src/effects/onFormEffects.ts", "../../../../node_modules/@formily/core/src/effects/onFieldEffects.ts", "../../../../node_modules/@formily/core/src/index.ts", "../../../../node_modules/@formily/core/esm/models/types.js", "../../../../node_modules/@formily/core/src/effects/index.ts"],
  "sourcesContent": ["import { isFn } from '@formily/shared'\nimport { DataField } from '..'\nimport {\n  Form,\n  Field,\n  ArrayField,\n  ObjectField,\n  VoidField,\n  Query,\n} from '../models'\nimport {\n  IFormState,\n  IFieldState,\n  IVoidFieldState,\n  GeneralField,\n  IGeneralFieldState,\n} from '../types'\n\nexport const isForm = (node: any): node is Form => {\n  return node instanceof Form\n}\n\nexport const isField = (node: any): node is Field => {\n  return node instanceof Field\n}\n\nexport const isGeneralField = (node: any): node is GeneralField => {\n  return node instanceof Field || node instanceof VoidField\n}\n\nexport const isArrayField = (node: any): node is ArrayField => {\n  return node instanceof ArrayField\n}\n\nexport const isObjectField = (node: any): node is ObjectField => {\n  return node instanceof ObjectField\n}\n\nexport const isVoidField = (node: any): node is VoidField => {\n  return node instanceof VoidField\n}\n\nexport const isFormState = (state: any): state is IFormState => {\n  if (isFn(state?.initialize)) return false\n  return state?.displayName === 'Form'\n}\n\nexport const isFieldState = (state: any): state is IFieldState => {\n  if (isFn(state?.initialize)) return false\n  return state?.displayName === 'Field'\n}\n\nexport const isGeneralFieldState = (node: any): node is IGeneralFieldState => {\n  if (isFn(node?.initialize)) return false\n  return node?.displayName?.indexOf('Field') > -1\n}\n\nexport const isArrayFieldState = (state: any): state is IFieldState => {\n  if (isFn(state?.initialize)) return false\n  return state?.displayName === 'ArrayField'\n}\n\nexport const isDataField = (node: any): node is DataField => {\n  return isField(node) || isArrayField(node) || isObjectField(node)\n}\n\nexport const isDataFieldState = (node: any) => {\n  return (\n    isFieldState(node) || isObjectFieldState(node) || isArrayFieldState(node)\n  )\n}\n\nexport const isObjectFieldState = (state: any): state is IFieldState => {\n  if (isFn(state?.initialize)) return false\n  return state?.displayName === 'ObjectField'\n}\n\nexport const isVoidFieldState = (state: any): state is IVoidFieldState => {\n  if (isFn(state?.initialize)) return false\n  return state?.displayName === 'VoidField'\n}\n\nexport const isQuery = (query: any): query is Query => {\n  return query && query instanceof Query\n}\n", "export * from './Heart'\nexport * from './LifeCycle'\nexport * from './Graph'\nexport * from './Query'\nexport * from './Form'\nexport * from './Field'\nexport * from './ArrayField'\nexport * from './ObjectField'\nexport * from './VoidField'\n", "import { isFn, isStr, each } from '@formily/shared'\nimport { LifeCycleHandler, LifeCyclePayload } from '../types'\n\ntype LifeCycleParams<Payload> = Array<\n  | string\n  | LifeCycleHandler<Payload>\n  | { [key: string]: LifeCycleHandler<Payload> }\n>\nexport class LifeCycle<Payload = any> {\n  private listener: LifeCyclePayload<Payload>\n\n  constructor(...params: LifeCycleParams<Payload>) {\n    this.listener = this.buildListener(params)\n  }\n  buildListener = (params: any[]) => {\n    return function (payload: { type: string; payload: Payload }, ctx: any) {\n      for (let index = 0; index < params.length; index++) {\n        let item = params[index]\n        if (isFn(item)) {\n          item.call(this, payload, ctx)\n        } else if (isStr(item) && isFn(params[index + 1])) {\n          if (item === payload.type) {\n            params[index + 1].call(this, payload.payload, ctx)\n          }\n          index++\n        } else {\n          each<any, any>(item, (handler, type) => {\n            if (isFn(handler) && isStr(type)) {\n              if (type === payload.type) {\n                handler.call(this, payload.payload, ctx)\n                return false\n              }\n            }\n          })\n        }\n      }\n    }\n  }\n\n  notify = <Payload>(type: any, payload?: Payload, ctx?: any) => {\n    if (isStr(type)) {\n      this.listener.call(ctx, { type, payload }, ctx)\n    }\n  }\n}\n", "import { isStr, isArr, Subscribable } from '@formily/shared'\nimport { LifeCycle } from './LifeCycle'\nimport { IHeartProps } from '../types'\nexport class Heart<Payload = any, Context = any> extends Subscribable {\n  lifecycles: LifeCycle<Payload>[] = []\n\n  outerLifecycles: Map<any, LifeCycle<Payload>[]> = new Map()\n\n  context: Context\n\n  constructor({ lifecycles, context }: IHeartProps<Context> = {}) {\n    super()\n    this.lifecycles = this.buildLifeCycles(lifecycles || [])\n    this.context = context\n  }\n\n  buildLifeCycles = (lifecycles: LifeCycle[]) => {\n    return lifecycles.reduce((buf, item) => {\n      if (item instanceof LifeCycle) {\n        return buf.concat(item)\n      } else {\n        if (isArr(item)) {\n          return this.buildLifeCycles(item)\n        } else if (typeof item === 'object') {\n          this.context = item\n          return buf\n        }\n        return buf\n      }\n    }, [])\n  }\n\n  addLifeCycles = (id: any, lifecycles: LifeCycle[] = []) => {\n    const observers = this.buildLifeCycles(lifecycles)\n    if (observers.length) {\n      this.outerLifecycles.set(id, observers)\n    }\n  }\n\n  hasLifeCycles = (id: any) => {\n    return this.outerLifecycles.has(id)\n  }\n\n  removeLifeCycles = (id: any) => {\n    this.outerLifecycles.delete(id)\n  }\n\n  setLifeCycles = (lifecycles: LifeCycle[] = []) => {\n    this.lifecycles = this.buildLifeCycles(lifecycles)\n  }\n\n  publish = <P, C>(type: any, payload?: P, context?: C) => {\n    if (isStr(type)) {\n      this.lifecycles.forEach((lifecycle) => {\n        lifecycle.notify(type, payload, context || this.context)\n      })\n      this.outerLifecycles.forEach((lifecycles) => {\n        lifecycles.forEach((lifecycle) => {\n          lifecycle.notify(type, payload, context || this.context)\n        })\n      })\n      this.notify({\n        type,\n        payload,\n      })\n    }\n  }\n\n  clear = () => {\n    this.lifecycles = []\n    this.outerLifecycles.clear()\n    this.unsubscribe()\n  }\n}\n", "import { define, batch } from '@formily/reactive'\nimport { each, FormPath } from '@formily/shared'\nimport { IFormGraph } from '../types'\nimport { Form } from './Form'\nimport {\n  isFormState,\n  isFieldState,\n  isArrayFieldState,\n  isObjectFieldState,\n} from '../shared/checkers'\n\nexport class Graph {\n  form: Form\n\n  constructor(form: Form) {\n    this.form = form\n    define(this, {\n      setGraph: batch,\n    })\n  }\n\n  getGraph = (): IFormGraph => {\n    const graph = {}\n    graph[''] = this.form.getState()\n    each(this.form.fields, (field: any, identifier) => {\n      graph[identifier] = field.getState()\n    })\n    return graph\n  }\n\n  setGraph = (graph: IFormGraph) => {\n    const form = this.form\n    const createField = (identifier: string, state: any) => {\n      const address = FormPath.parse(identifier)\n      const name = address.segments[address.segments.length - 1]\n      const basePath = address.parent()\n      if (isFieldState(state)) {\n        return this.form.createField({ name, basePath })\n      } else if (isArrayFieldState(state)) {\n        return this.form.createArrayField({ name, basePath })\n      } else if (isObjectFieldState(state)) {\n        return this.form.createObjectField({ name, basePath })\n      } else {\n        return this.form.createVoidField({ name, basePath })\n      }\n    }\n    each(graph, (state, address) => {\n      if (isFormState(state)) {\n        form.setState(state)\n      } else {\n        const field = form.fields[address]\n        if (field) {\n          field.setState(state as any)\n        } else {\n          createField(address, state).setState(state as any)\n        }\n      }\n    })\n  }\n}\n", "import { FormPath, isFn, each, FormPathPattern } from '@formily/shared'\nimport { buildDataPath } from '../shared/internals'\nimport { GeneralField, IGeneralFieldState, IQueryProps } from '../types'\nimport { Form } from './Form'\n\nconst output = (\n  field: GeneralField,\n  taker: (field: GeneralField, address: FormPath) => any\n) => {\n  if (!field) return\n  if (isFn(taker)) {\n    return taker(field, field.address)\n  }\n  return field\n}\n\nconst takeMatchPattern = (form: Form, pattern: FormPath) => {\n  const identifier = pattern.toString()\n  const indexIdentifier = form.indexes[identifier]\n  const absoluteField = form.fields[identifier]\n  const indexField = form.fields[indexIdentifier]\n  if (absoluteField) {\n    return identifier\n  } else if (indexField) {\n    return indexIdentifier\n  }\n}\n\nexport class Query {\n  private pattern: FormPath\n  private addresses: string[] = []\n  private form: Form\n  constructor(props: IQueryProps) {\n    this.pattern = FormPath.parse(props.pattern, props.base)\n    this.form = props.form\n    if (!this.pattern.isMatchPattern) {\n      const matched = takeMatchPattern(\n        this.form,\n        this.pattern.haveRelativePattern\n          ? buildDataPath(props.form.fields, this.pattern)\n          : this.pattern\n      )\n      if (matched) {\n        this.addresses = [matched]\n      }\n    } else {\n      each(this.form.fields, (field, address) => {\n        if (field.match(this.pattern)) {\n          this.addresses.push(address)\n        }\n      })\n    }\n  }\n\n  take(): GeneralField\n  take<Result>(\n    getter: (field: GeneralField, address: FormPath) => Result\n  ): Result\n  take(taker?: any): any {\n    return output(this.form.fields[this.addresses[0]], taker)\n  }\n\n  map(): GeneralField[]\n  map<Result>(\n    iterator?: (field: GeneralField, address: FormPath) => Result\n  ): Result[]\n  map(iterator?: any): any {\n    return this.addresses.map((address) =>\n      output(this.form.fields[address], iterator)\n    )\n  }\n\n  forEach<Result>(\n    iterator: (field: GeneralField, address: FormPath) => Result\n  ) {\n    return this.addresses.forEach((address) =>\n      output(this.form.fields[address], iterator)\n    )\n  }\n\n  reduce<Result>(\n    reducer: (value: Result, field: GeneralField, address: FormPath) => Result,\n    initial?: Result\n  ): Result {\n    return this.addresses.reduce(\n      (value, address) =>\n        output(this.form.fields[address], (field, address) =>\n          reducer(value, field, address)\n        ),\n      initial\n    )\n  }\n\n  get<K extends keyof IGeneralFieldState>(key: K): IGeneralFieldState[K] {\n    const results: any = this.take()\n    if (results) {\n      return results[key]\n    }\n  }\n\n  getIn(pattern?: FormPathPattern) {\n    return FormPath.getIn(this.take(), pattern)\n  }\n\n  value() {\n    return this.get('value')\n  }\n\n  initialValue() {\n    return this.get('initialValue')\n  }\n}\n", "export * from './validator'\nexport * from './parser'\nexport * from './registry'\nexport * from './types'\n", "export type ValidatorFormats =\n  | 'url'\n  | 'email'\n  | 'ipv6'\n  | 'ipv4'\n  | 'number'\n  | 'integer'\n  | 'idcard'\n  | 'qq'\n  | 'phone'\n  | 'money'\n  | 'zh'\n  | 'date'\n  | 'zip'\n  | (string & {})\n\nexport interface IValidateResult {\n  type: 'error' | 'warning' | 'success' | (string & {})\n  message: string\n}\n\nexport interface IValidateResults {\n  error?: string[]\n  warning?: string[]\n  success?: string[]\n}\n\nexport const isValidateResult = (obj: any): obj is IValidateResult =>\n  !!obj['type'] && !!obj['message']\n\nexport type ValidatorFunctionResponse =\n  | null\n  | string\n  | boolean\n  | IValidateResult\n\nexport type ValidatorFunction<Context = any> = (\n  value: any,\n  rule: IValidatorRules<Context>,\n  ctx: Context,\n  render: (message: string, scope?: any) => string\n) => ValidatorFunctionResponse | Promise<ValidatorFunctionResponse> | null\n\nexport type ValidatorParsedFunction<Context = any> = (\n  value: any,\n  ctx: Context\n) => IValidateResult | Promise<IValidateResult> | null\n\nexport type ValidatorTriggerType =\n  | 'onInput'\n  | 'onFocus'\n  | 'onBlur'\n  | (string & {})\n\nexport interface IValidatorRules<Context = any> {\n  triggerType?: ValidatorTriggerType\n  format?: ValidatorFormats\n  validator?: ValidatorFunction<Context>\n  required?: boolean\n  pattern?: RegExp | string\n  max?: number\n  maximum?: number\n  maxItems?: number\n  minItems?: number\n  maxLength?: number\n  minLength?: number\n  exclusiveMaximum?: number\n  exclusiveMinimum?: number\n  minimum?: number\n  min?: number\n  len?: number\n  whitespace?: boolean\n  enum?: any[]\n  const?: any\n  multipleOf?: number\n  uniqueItems?: boolean\n  maxProperties?: number\n  minProperties?: number\n  message?: string\n  [key: string]: any\n}\n\nexport interface IRegistryLocaleMessages {\n  [key: string]: string | IRegistryLocaleMessages\n}\n\nexport interface IRegistryLocales {\n  [language: string]: IRegistryLocaleMessages\n}\n\nexport interface IRegistryRules<Context = any> {\n  [key: string]: ValidatorFunction<Context>\n}\n\nexport interface IRegistryFormats {\n  [key: string]: string | RegExp\n}\n\nexport type ValidatorDescription<Context = any> =\n  | ValidatorFormats\n  | ValidatorFunction<Context>\n  | IValidatorRules<Context>\n\nexport type MultiValidator<Context = any> = ValidatorDescription<Context>[]\n\nexport type Validator<Context = any> =\n  | ValidatorDescription<Context>\n  | MultiValidator<Context>\n\nexport interface IValidatorOptions<Context = any> {\n  validateFirst?: boolean\n  triggerType?: ValidatorTriggerType\n  context?: Context\n}\n", "import {\n  FormPath,\n  each,\n  lowerCase,\n  globalThisPolyfill,\n  merge as deepmerge,\n  isFn,\n  isStr,\n} from '@formily/shared'\nimport {\n  ValidatorFunctionResponse,\n  ValidatorFunction,\n  IRegistryFormats,\n  IRegistryLocaleMessages,\n  IRegistryLocales,\n  IRegistryRules,\n} from './types'\n\nconst getIn = FormPath.getIn\n\nconst self: any = globalThisPolyfill\n\nconst defaultLanguage = 'en'\n\nconst getBrowserlanguage = () => {\n  /* istanbul ignore next */\n  if (!self.navigator) {\n    return defaultLanguage\n  }\n  return (\n    self.navigator.browserlanguage || self.navigator.language || defaultLanguage\n  )\n}\n\nconst registry = {\n  locales: {\n    messages: {},\n    language: getBrowserlanguage(),\n  },\n  formats: {},\n  rules: {},\n  template: null,\n}\n\nconst getISOCode = (language: string) => {\n  let isoCode = registry.locales.language\n  const lang = lowerCase(language)\n  if (registry.locales.messages[language]) {\n    return language\n  }\n  each(\n    registry.locales.messages,\n    (messages: IRegistryLocaleMessages, key: string) => {\n      const target = lowerCase(key)\n      if (target.indexOf(lang) > -1 || lang.indexOf(target) > -1) {\n        isoCode = key\n        return false\n      }\n    }\n  )\n  return isoCode\n}\n\nexport const getValidateLocaleIOSCode = getISOCode\n\nexport const setValidateLanguage = (lang: string) => {\n  registry.locales.language = lang || defaultLanguage\n}\n\nexport const getValidateLanguage = () => registry.locales.language\n\nexport const getLocaleByPath = (path: string, lang: string = registry.locales.language) => getIn(\n  registry.locales.messages,\n  `${getISOCode(lang)}.${path}`\n)\n\n\nexport const getValidateLocale = (path: string) => {\n  const message = getLocaleByPath(path);\n  return message || getLocaleByPath('pattern') || getLocaleByPath('pattern', defaultLanguage)\n}\n\nexport const getValidateMessageTemplateEngine = () => registry.template\n\nexport const getValidateFormats = (key?: string) =>\n  key ? registry.formats[key] : registry.formats\n\nexport const getValidateRules = <T>(\n  key?: T\n): T extends string\n  ? ValidatorFunction\n  : { [key: string]: ValidatorFunction } =>\n  key ? registry.rules[key as any] : registry.rules\n\nexport const registerValidateLocale = (locale: IRegistryLocales) => {\n  registry.locales.messages = deepmerge(registry.locales.messages, locale)\n}\n\nexport const registerValidateRules = (rules: IRegistryRules) => {\n  each(rules, (rule, key) => {\n    if (isFn(rule)) {\n      registry.rules[key] = rule\n    }\n  })\n}\n\nexport const registerValidateFormats = (formats: IRegistryFormats) => {\n  each(formats, (pattern, key) => {\n    if (isStr(pattern) || pattern instanceof RegExp) {\n      registry.formats[key] = new RegExp(pattern)\n    }\n  })\n}\n\nexport const registerValidateMessageTemplateEngine = (\n  template: (message: ValidatorFunctionResponse, context: any) => any\n) => {\n  registry.template = template\n}\n", "import { isFn, isStr, FormPath } from '@formily/shared'\nimport { IValidateResult, IValidatorRules } from './types'\nimport { getValidateMessageTemplateEngine } from './registry'\n\nexport const render = (\n  result: IValidateResult,\n  rules: IValidatorRules\n): IValidateResult => {\n  const { message } = result\n  if (isStr(result.message)) {\n    const template = getValidateMessageTemplateEngine()\n    if (isFn(template)) {\n      result.message = template(message, rules)\n    }\n    result.message = result.message.replace(\n      /\\{\\{\\s*([\\w.]+)\\s*\\}\\}/g,\n      (_, $0) => {\n        return FormPath.getIn(rules, $0)\n      }\n    )\n  }\n  return result\n}\n", "import { isArr, isBool, isFn, isStr } from '@formily/shared'\nimport {\n  ValidatorDescription,\n  ValidatorFunction,\n  ValidatorParsedFunction,\n  Validator,\n  IValidatorRules,\n  isValidateResult,\n  IValidatorOptions,\n} from './types'\nimport { getValidateRules, getValidateLocale } from './registry'\nimport { render } from './template'\n\nconst getRuleMessage = (rule: IValidatorRules, type: string) => {\n  if (rule.format) {\n    return rule.message || getValidateLocale(rule.format)\n  }\n  return rule.message || getValidateLocale(type)\n}\n\nexport const parseValidatorDescription = (\n  description: ValidatorDescription\n): IValidatorRules => {\n  if (!description) return {}\n  let rules: IValidatorRules = {}\n  if (isStr(description)) {\n    rules.format = description\n  } else if (isFn(description)) {\n    rules.validator = description\n  } else {\n    rules = Object.assign(rules, description)\n  }\n  return rules\n}\n\nexport const parseValidatorDescriptions = <Context = any>(\n  validator: Validator<Context>\n): IValidatorRules[] => {\n  if (!validator) return []\n  const array = isArr(validator) ? validator : [validator]\n  return array.map((description) => {\n    return parseValidatorDescription(description)\n  })\n}\n\nexport const parseValidatorRules = (\n  rules: IValidatorRules = {}\n): ValidatorParsedFunction[] => {\n  const getRulesKeys = (): string[] => {\n    const keys = []\n    if ('required' in rules) {\n      keys.push('required')\n    }\n    for (let key in rules) {\n      if (key === 'required' || key === 'validator') continue\n      keys.push(key)\n    }\n    if ('validator' in rules) {\n      keys.push('validator')\n    }\n    return keys\n  }\n  const getContext = (context: any, value: any) => {\n    return {\n      ...rules,\n      ...context,\n      value,\n    }\n  }\n  const createValidate =\n    (callback: ValidatorFunction, message: string) =>\n    async (value: any, context: any) => {\n      const context_ = getContext(context, value)\n      try {\n        const results = await callback(\n          value,\n          { ...rules, message },\n          context_,\n          (message: string, scope: any) => {\n            return render(\n              {\n                type: 'error',\n                message,\n              },\n              Object.assign(context_, scope)\n            )?.message\n          }\n        )\n        if (isBool(results)) {\n          if (!results) {\n            return render(\n              {\n                type: 'error',\n                message,\n              },\n              context_\n            )\n          }\n          return {\n            type: 'error',\n            message: undefined,\n          }\n        } else if (results) {\n          if (isValidateResult(results)) {\n            return render(results, context_)\n          }\n          return render(\n            {\n              type: 'error',\n              message: results,\n            },\n            context_\n          )\n        }\n\n        return {\n          type: 'error',\n          message: undefined,\n        }\n      } catch (e) {\n        return {\n          type: 'error',\n          message: e?.message || e,\n        }\n      }\n    }\n  return getRulesKeys().reduce((buf, key) => {\n    const callback = getValidateRules(key)\n    if (callback) {\n      const validator = createValidate(callback, getRuleMessage(rules, key))\n      return buf.concat(validator)\n    }\n    return buf\n  }, [])\n}\n\nexport const parseValidator = <Context = any>(\n  validator: Validator<Context>,\n  options: IValidatorOptions = {}\n) => {\n  if (!validator) return []\n  const array = isArr(validator) ? validator : [validator]\n  return array.reduce<ValidatorParsedFunction<Context>[]>(\n    (buf, description) => {\n      const rules = parseValidatorDescription(description)\n      const triggerType = rules.triggerType ?? 'onInput'\n      if (options?.triggerType && options.triggerType !== triggerType)\n        return buf\n      return rules ? buf.concat(parseValidatorRules(rules)) : buf\n    },\n    []\n  )\n}\n", "export default {\n  en: {\n    pattern: 'This field is invalid',\n    invalid: 'This field is invalid',\n    required: 'The field value is required',\n    number: 'The field value is not a number',\n    integer: 'The field value is not an integer number',\n    url: 'The field value is a invalid url',\n    email: 'The field value is not a email format',\n    ipv6: 'The field value is not a ipv6 format',\n    ipv4: 'The field value is not a ipv4 format',\n    idcard: 'The field value is not an idcard format',\n    qq: 'The field value is not a qq number format',\n    phone: 'The field value is not a phone number format',\n    money: 'The field value is not a currency format',\n    zh: 'The field value is not a chinese string',\n    date: 'The field value is not a valid date format',\n    zip: 'The field value is not a zip format',\n    len: 'The length or number of entries must be {{len}}',\n    min: 'The length or number of entries must be at least {{min}}',\n    minLength: 'The length or number of entries must be at least {{minLength}}',\n    minItems: 'The length or number of entries must be at least {{minItems}}',\n    maximum: 'The field value cannot be greater than {{maximum}}',\n    exclusiveMaximum: 'The field value must be less than {{exclusiveMaximum}}',\n    minimum: 'The field value cannot be less than {{minimum}}',\n    exclusiveMinimum:\n      'The field value must be greater than {{exclusiveMinimum}}',\n    max: 'The field length or number of entries must be at most {{max}}',\n    maxLength:\n      'The field length or number of entries must be at most {{maxLength}}',\n    maxItems:\n      'The field length or number of entries must be at most {{maxItems}}',\n    whitespace: 'This field value cannot be blank string.',\n    enum: 'The field value must be one of {{enum}}',\n\n    const: 'The field value must be equal to {{const}}',\n    multipleOf: 'The field value must be divisible by {{multipleOf}}',\n    maxProperties:\n      'The number of field properties cannot be greater than {{maxProperties}}',\n    minProperties:\n      'The number of field properties cannot be less than {{maxProperties}}',\n    uniqueItems: 'Array elements are not unique',\n  },\n  zh: {\n    pattern: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u4E00\u4E2A\u5408\u6CD5\u7684\u5B57\u6BB5',\n    invalid: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u4E00\u4E2A\u5408\u6CD5\u7684\u5B57\u6BB5',\n    required: '\u8BE5\u5B57\u6BB5\u662F\u5FC5\u586B\u5B57\u6BB5',\n    number: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u6570\u5B57',\n    integer: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u6574\u578B\u6570\u5B57',\n    url: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684url',\n    email: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u90AE\u7BB1\u683C\u5F0F',\n    ipv6: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684ipv6\u683C\u5F0F',\n    ipv4: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684ipv4\u683C\u5F0F',\n    idcard: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u8EAB\u4EFD\u8BC1\u683C\u5F0F',\n    qq: '\u8BE5\u5B57\u6BB5\u4E0D\u7B26\u5408QQ\u53F7\u683C\u5F0F',\n    phone: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u6709\u6548\u7684\u624B\u673A\u53F7',\n    money: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u6709\u6548\u8D27\u5E01\u683C\u5F0F',\n    zh: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u4E2D\u6587\u5B57\u7B26\u4E32',\n    date: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u65E5\u671F\u683C\u5F0F',\n    zip: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u90AE\u7F16\u683C\u5F0F',\n    len: '\u957F\u5EA6\u6216\u6761\u76EE\u6570\u5FC5\u987B\u4E3A{{len}}',\n    min: '\u957F\u5EA6\u6216\u6761\u76EE\u6570\u4E0D\u80FD\u5C0F\u4E8E{{min}}',\n    minLength: '\u957F\u5EA6\u6216\u6761\u76EE\u6570\u4E0D\u80FD\u5C0F\u4E8E{{minLength}}',\n    minItems: '\u957F\u5EA6\u6216\u6761\u76EE\u6570\u4E0D\u80FD\u5C0F\u4E8E{{minItems}}',\n    max: '\u957F\u5EA6\u6216\u6761\u76EE\u6570\u4E0D\u80FD\u5927\u4E8E{{max}}',\n    maxLength: '\u957F\u5EA6\u6216\u6761\u76EE\u6570\u4E0D\u80FD\u5927\u4E8E{{maxLength}}',\n    maxItems: '\u957F\u5EA6\u6216\u6761\u76EE\u6570\u4E0D\u80FD\u5927\u4E8E{{maxItems}}',\n    maximum: '\u6570\u503C\u4E0D\u80FD\u5927\u4E8E{{maximum}}',\n    exclusiveMaximum: '\u6570\u503C\u5FC5\u987B\u5C0F\u4E8E{{exclusiveMaximum}}',\n    minimum: '\u6570\u503C\u4E0D\u80FD\u5C0F\u4E8E{{minimum}}',\n    exclusiveMinimum: '\u6570\u503C\u5FC5\u987B\u5927\u4E8E{{exclusiveMinimum}}',\n    whitespace: '\u4E0D\u80FD\u4E3A\u7EAF\u7A7A\u767D\u5B57\u7B26\u4E32',\n    enum: '\u5B57\u6BB5\u503C\u5FC5\u987B\u4E3A{{enum}}\u5176\u4E2D\u4E00\u4E2A',\n    const: '\u5B57\u6BB5\u503C\u5FC5\u987B\u7B49\u4E8E{{const}}',\n    multipleOf: '\u5B57\u6BB5\u503C\u4E0D\u80FD\u88AB{{multipleOf}}\u6574\u9664',\n    maxProperties: '\u5B57\u6BB5\u5C5E\u6027\u6570\u91CF\u4E0D\u80FD\u5927\u4E8E{{maxProperties}}',\n    minProperties: '\u5B57\u6BB5\u5C5E\u6027\u6570\u91CF\u4E0D\u80FD\u5C0F\u4E8E{{minProperties}}',\n    uniqueItems: '\u6570\u7EC4\u5143\u7D20\u4E0D\u552F\u4E00',\n  },\n  'en-US': {\n    pattern: 'This field is invalid',\n    invalid: 'This field is invalid',\n    required: 'The field value is required',\n    number: 'The field value is not a number',\n    integer: 'The field value is not an integer number',\n    url: 'The field value is a invalid url',\n    email: 'The field value is not a email format',\n    ipv6: 'The field value is not a ipv6 format',\n    ipv4: 'The field value is not a ipv4 format',\n    idcard: 'The field value is not an idcard format',\n    qq: 'The field value is not a qq number format',\n    phone: 'The field value is not a phone number format',\n    money: 'The field value is not a currency format',\n    zh: 'The field value is not a chinese string',\n    date: 'The field value is not a valid date format',\n    zip: 'The field value is not a zip format',\n    len: 'The length or number of entries must be {{len}}',\n    min: 'The length or number of entries must be at least {{min}}',\n    minLength: 'The length or number of entries must be at least {{minLength}}',\n    minItems: 'The length or number of entries must be at least {{minItems}}',\n    maximum: 'The field value cannot be greater than {{maximum}}',\n    exclusiveMaximum: 'The field value must be less than {{exclusiveMaximum}}',\n    minimum: 'The field value cannot be less than {{minimum}}',\n    exclusiveMinimum:\n      'The field value must be greater than {{exclusiveMinimum}}',\n    max: 'The field length or number of entries must be at most {{max}}',\n    maxLength:\n      'The field length or number of entries must be at most {{maxLength}}',\n    maxItems:\n      'The field length or number of entries must be at most {{maxItems}}',\n    whitespace: 'This field value cannot be blank string.',\n    enum: 'The field value must be one of {{enum}}',\n    const: 'The field value must be equal to {{const}}',\n    multipleOf: 'The field value must be divisible by {{multipleOf}}',\n    maxProperties:\n      'The number of field properties cannot be greater than {{maxProperties}}',\n    minProperties:\n      'The number of field properties cannot be less than {{maxProperties}}',\n    uniqueItems: 'Array elements are not unique',\n  },\n  'zh-CN': {\n    pattern: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u4E00\u4E2A\u5408\u6CD5\u7684\u5B57\u6BB5',\n    invalid: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u4E00\u4E2A\u5408\u6CD5\u7684\u5B57\u6BB5',\n    required: '\u8BE5\u5B57\u6BB5\u662F\u5FC5\u586B\u5B57\u6BB5',\n    number: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u6570\u5B57',\n    integer: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u6574\u578B\u6570\u5B57',\n    url: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684url',\n    email: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u90AE\u7BB1\u683C\u5F0F',\n    ipv6: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684ipv6\u683C\u5F0F',\n    ipv4: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684ipv4\u683C\u5F0F',\n    idcard: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u8EAB\u4EFD\u8BC1\u683C\u5F0F',\n    qq: '\u8BE5\u5B57\u6BB5\u4E0D\u7B26\u5408QQ\u53F7\u683C\u5F0F',\n    phone: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u6709\u6548\u7684\u624B\u673A\u53F7',\n    money: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u6709\u6548\u8D27\u5E01\u683C\u5F0F',\n    zh: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u4E2D\u6587\u5B57\u7B26\u4E32',\n    date: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u65E5\u671F\u683C\u5F0F',\n    zip: '\u8BE5\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u90AE\u7F16\u683C\u5F0F',\n    len: '\u957F\u5EA6\u6216\u6761\u76EE\u6570\u5FC5\u987B\u4E3A{{len}}',\n    min: '\u957F\u5EA6\u6216\u6761\u76EE\u6570\u4E0D\u80FD\u5C0F\u4E8E{{min}}',\n    minLength: '\u957F\u5EA6\u6216\u6761\u76EE\u6570\u4E0D\u80FD\u5C0F\u4E8E{{minLength}}',\n    minItems: '\u957F\u5EA6\u6216\u6761\u76EE\u6570\u4E0D\u80FD\u5C0F\u4E8E{{minItems}}',\n    maxLength: '\u957F\u5EA6\u6216\u6761\u76EE\u6570\u4E0D\u80FD\u5927\u4E8E{{maxLength}}',\n    maxItems: '\u957F\u5EA6\u6216\u6761\u76EE\u6570\u4E0D\u80FD\u5927\u4E8E{{maxItems}}',\n    max: '\u957F\u5EA6\u6216\u6761\u76EE\u6570\u4E0D\u80FD\u5927\u4E8E{{max}}',\n    maximum: '\u6570\u503C\u4E0D\u80FD\u5927\u4E8E{{maximum}}',\n    exclusiveMaximum: '\u6570\u503C\u5FC5\u987B\u5C0F\u4E8E{{exclusiveMaximum}}',\n    minimum: '\u6570\u503C\u4E0D\u80FD\u5C0F\u4E8E{{minimum}}',\n    exclusiveMinimum: '\u6570\u503C\u5FC5\u987B\u5927\u4E8E{{exclusiveMinimum}}',\n    whitespace: '\u4E0D\u80FD\u4E3A\u7EAF\u7A7A\u767D\u5B57\u7B26\u4E32',\n    enum: '\u5B57\u6BB5\u503C\u5FC5\u987B\u4E3A{{enum}}\u5176\u4E2D\u4E00\u4E2A',\n    const: '\u5B57\u6BB5\u503C\u5FC5\u987B\u7B49\u4E8E{{const}}',\n    multipleOf: '\u5B57\u6BB5\u503C\u4E0D\u80FD\u88AB{{multipleOf}}\u6574\u9664',\n    maxProperties: '\u5B57\u6BB5\u5C5E\u6027\u6570\u91CF\u4E0D\u80FD\u5927\u4E8E{{maxProperties}}',\n    minProperties: '\u5B57\u6BB5\u5C5E\u6027\u6570\u91CF\u4E0D\u80FD\u5C0F\u4E8E{{minProperties}}',\n    uniqueItems: '\u6570\u7EC4\u5143\u7D20\u4E0D\u552F\u4E00',\n  },\n  'zh-TW': {\n    pattern: '\u8A72\u5B57\u6BB5\u4E0D\u662F\u4E00\u500B\u5408\u6CD5\u7684\u5B57\u6BB5',\n    invalid: '\u8A72\u5B57\u6BB5\u4E0D\u662F\u4E00\u500B\u5408\u6CD5\u7684\u5B57\u6BB5',\n    required: '\u8A72\u5B57\u6BB5\u662F\u5FC5\u586B\u5B57\u6BB5',\n    number: '\u8A72\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u6578\u5B57',\n    integer: '\u8A72\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u6574\u578B\u6578\u5B57',\n    url: '\u8A72\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684url',\n    email: '\u8A72\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u90F5\u7BB1\u683C\u5F0F',\n    ipv6: '\u8A72\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684ipv6\u683C\u5F0F',\n    ipv4: '\u8A72\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684ipv4\u683C\u5F0F',\n    idcard: '\u8A72\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u8EAB\u4EFD\u8B49\u683C\u5F0F',\n    qq: '\u8A72\u5B57\u6BB5\u4E0D\u7B26\u5408QQ\u865F\u683C\u5F0F',\n    phone: '\u8A72\u5B57\u6BB5\u4E0D\u662F\u6709\u6548\u7684\u624B\u6A5F\u865F',\n    money: '\u8A72\u5B57\u6BB5\u4E0D\u662F\u6709\u6548\u8CA8\u5E63\u683C\u5F0F',\n    zh: '\u8A72\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u4E2D\u6587\u5B57\u7B26\u4E32',\n    date: '\u8A72\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u65E5\u671F\u683C\u5F0F',\n    zip: '\u8A72\u5B57\u6BB5\u4E0D\u662F\u5408\u6CD5\u7684\u90F5\u7DE8\u683C\u5F0F',\n    len: '\u9577\u5EA6\u6216\u689D\u76EE\u6578\u5FC5\u9808\u70BA{{len}}',\n    min: '\u9577\u5EA6\u6216\u689D\u76EE\u6578\u4E0D\u80FD\u5C0F\u65BC{{min}}',\n    minItems: '\u9577\u5EA6\u6216\u689D\u76EE\u6578\u4E0D\u80FD\u5C0F\u65BC{{minItems}}',\n    minLength: '\u9577\u5EA6\u6216\u689D\u76EE\u6578\u4E0D\u80FD\u5C0F\u65BC{{minLength}}',\n    max: '\u9577\u5EA6\u6216\u689D\u76EE\u6578\u4E0D\u80FD\u5927\u65BC{{max}}',\n    maxItems: '\u9577\u5EA6\u6216\u689D\u76EE\u6578\u4E0D\u80FD\u5927\u65BC{{maxItems}}',\n    maxLength: '\u9577\u5EA6\u6216\u689D\u76EE\u6578\u4E0D\u80FD\u5927\u65BC{{maxLength}}',\n    maximum: '\u6578\u503C\u4E0D\u80FD\u5927\u65BC{{maximum}}',\n    exclusiveMaximum: '\u6578\u503C\u5FC5\u9808\u5C0F\u65BC{{exclusiveMaximum}}',\n    minimum: '\u6578\u503C\u4E0D\u80FD\u5C0F\u65BC{{minimum}}',\n    exclusiveMinimum: '\u6578\u503C\u5FC5\u9808\u5927\u65BC{{exclusiveMinimum}}',\n    whitespace: '\u4E0D\u80FD\u70BA\u7D14\u7A7A\u767D\u5B57\u7B26\u4E32',\n    enum: '\u5B57\u6BB5\u503C\u5FC5\u9808\u70BA{{enum}}\u5176\u4E2D\u4E00\u500B',\n    const: '\u5B57\u6BB5\u503C\u5FC5\u9808\u7B49\u65BC{{const}}',\n    multipleOf: '\u5B57\u6BB5\u503C\u4E0D\u80FD\u88AB{{multipleOf}}\u6574\u9664',\n    maxProperties: '\u5B57\u6BB5\u5C6C\u6027\u6578\u91CF\u4E0D\u80FD\u5927\u65BC{{maxProperties}}',\n    minProperties: '\u5B57\u6BB5\u5C6C\u6027\u6578\u91CF\u4E0D\u80FD\u5C0F\u65BC{{minProperties}}',\n    uniqueItems: '\u6578\u7D44\u5143\u7D20\u4E0D\u552F\u4E00',\n  },\n  ja: {\n    url: '\u3053\u306E\u30D5\u30A3\u30FC\u30EB\u30C9\u306F\u7121\u52B9\u306AURL\u3067\u3059',\n    whitespace: '\u3053\u306E\u30D5\u30A3\u30FC\u30EB\u30C9\u3092\u7A7A\u306E\u6587\u5B57\u5217\u306B\u3059\u308B\u3053\u3068\u306F\u3067\u304D\u307E\u305B\u3093\u3002',\n    zh: '\u3053\u306E\u30D5\u30A3\u30FC\u30EB\u30C9\u306F\u4E2D\u56FD\u8A9E\u306E\u6587\u5B57\u5217\u3067\u306F\u3042\u308A\u307E\u305B\u3093',\n    zip: '\u3053\u306E\u30D5\u30A3\u30FC\u30EB\u30C9\u306Fzip\u5F62\u5F0F\u3067\u306F\u3042\u308A\u307E\u305B\u3093',\n    date: '\u3053\u306E\u30D5\u30A3\u30FC\u30EB\u30C9\u306F\u6709\u52B9\u306A\u65E5\u4ED8\u5F62\u5F0F\u3067\u306F\u3042\u308A\u307E\u305B\u3093',\n    email: '\u3053\u306E\u30D5\u30A3\u30FC\u30EB\u30C9\u306F\u30E1\u30FC\u30EB\u5F62\u5F0F\u3067\u306F\u3042\u308A\u307E\u305B\u3093',\n    exclusiveMaximum: '\u5024\u306F{{exclusiveMaximum}}\u672A\u6E80\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059',\n    exclusiveMinimum: '\u5024\u306F{{exclusiveMinimum}}\u3088\u308A\u5927\u304D\u3044\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059',\n    idcard: '\u3053\u306E\u30D5\u30A3\u30FC\u30EB\u30C9\u306FID\u30AB\u30FC\u30C9\u5F62\u5F0F\u3067\u306F\u3042\u308A\u307E\u305B\u3093',\n    integer: '\u3053\u306E\u30D5\u30A3\u30FC\u30EB\u30C9\u306F\u6574\u6570\u3067\u306F\u3042\u308A\u307E\u305B\u3093',\n    ipv4: '\u3053\u306E\u30D5\u30A3\u30FC\u30EB\u30C9\u306FIPv4\u5F62\u5F0F\u3067\u306F\u3042\u308A\u307E\u305B\u3093',\n    ipv6: '\u3053\u306E\u30D5\u30A3\u30FC\u30EB\u30C9\u306FIPv6\u5F62\u5F0F\u3067\u306F\u3042\u308A\u307E\u305B\u3093',\n    len: '\u30A8\u30F3\u30C8\u30EA\u306E\u9577\u3055\u307E\u305F\u306F\u6570\u306F{{len}}\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093',\n    max: '\u30A8\u30F3\u30C8\u30EA\u306E\u9577\u3055\u307E\u305F\u306F\u6570\u306F\u6700\u5927{{max}}\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093',\n    maxItems: '\u30A8\u30F3\u30C8\u30EA\u306E\u9577\u3055\u307E\u305F\u306F\u6570\u306F\u6700\u5927{{maxItems}}\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093',\n    maxLength: '\u30A8\u30F3\u30C8\u30EA\u306E\u9577\u3055\u307E\u305F\u306F\u6570\u306F\u6700\u5927{{maxLength}}\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093',\n    maximum: '\u5024\u306F{{\u6700\u5927}}\u3092\u8D85\u3048\u308B\u3053\u3068\u306F\u3067\u304D\u307E\u305B\u3093',\n    min: '\u30A8\u30F3\u30C8\u30EA\u306E\u9577\u3055\u307E\u305F\u306F\u6570\u306F\u3001\u5C11\u306A\u304F\u3068\u3082{{min}}\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059',\n    minItems:\n      '\u30A8\u30F3\u30C8\u30EA\u306E\u9577\u3055\u307E\u305F\u306F\u6570\u306F\u3001\u5C11\u306A\u304F\u3068\u3082{{minItems}}\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059',\n    minLength:\n      '\u30A8\u30F3\u30C8\u30EA\u306E\u9577\u3055\u307E\u305F\u306F\u6570\u306F\u3001\u5C11\u306A\u304F\u3068\u3082{{minLength}}\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059',\n    minimum: '\u5024\u306F{{minimum}}\u4EE5\u4E0A\u306B\u3059\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059',\n    money: '\u3053\u306E\u30D5\u30A3\u30FC\u30EB\u30C9\u306F\u901A\u8CA8\u5F62\u5F0F\u3067\u306F\u3042\u308A\u307E\u305B\u3093',\n    number: '\u3053\u306E\u30D5\u30A3\u30FC\u30EB\u30C9\u306F\u6570\u5024\u3067\u306F\u3042\u308A\u307E\u305B\u3093',\n    pattern: '\u3053\u306E\u30D5\u30A3\u30FC\u30EB\u30C9\u306F\u3069\u306E\u30D1\u30BF\u30FC\u30F3\u3068\u3082\u4E00\u81F4\u3057\u307E\u305B\u3093',\n    invalid: '\u3053\u306E\u30D5\u30A3\u30FC\u30EB\u30C9\u306F\u3069\u306E\u30D1\u30BF\u30FC\u30F3\u3068\u3082\u4E00\u81F4\u3057\u307E\u305B\u3093',\n    phone: '\u3053\u306E\u30D5\u30A3\u30FC\u30EB\u30C9\u306F\u96FB\u8A71\u756A\u53F7\u306E\u5F62\u5F0F\u3067\u306F\u3042\u308A\u307E\u305B\u3093',\n    qq: '\u3053\u306E\u30D5\u30A3\u30FC\u30EB\u30C9\u306Fqq\u6570\u5024\u5F62\u5F0F\u3067\u306F\u3042\u308A\u307E\u305B\u3093',\n    required: '\u3053\u306E\u9805\u76EE\u306F\u5FC5\u9808\u3067\u3059',\n    enum: '\u30D5\u30A3\u30FC\u30EB\u30C9\u5024\u306F{{enum}}\u306E\u3044\u305A\u308C\u304B\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059',\n    cons: '\u30D5\u30A3\u30FC\u30EB\u30C9\u5024\u306F{{const}}\u3068\u7B49\u3057\u304F\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093',\n    multipleOf: '\u30D5\u30A3\u30FC\u30EB\u30C9\u5024\u3092{{multipleOf}}\u3067\u5272\u308A\u5207\u308C\u306A\u3044',\n    maxProperties:\n      '\u30D5\u30A3\u30FC\u30EB\u30C9\u30D7\u30ED\u30D1\u30C6\u30A3\u306E\u6570\u306F{{maxProperties}}\u3092\u8D85\u3048\u308B\u3053\u3068\u306F\u3067\u304D\u307E\u305B\u3093',\n    minProperties:\n      '\u30D5\u30A3\u30FC\u30EB\u30C9\u30D7\u30ED\u30D1\u30C6\u30A3\u306E\u6570\u306F{{minProperties}}\u672A\u6E80\u306B\u3059\u308B\u3053\u3068\u306F\u3067\u304D\u307E\u305B\u3093',\n    uniqueItems: '\u914D\u5217\u8981\u7D20\u306F\u4E00\u610F\u3067\u306F\u3042\u308A\u307E\u305B\u3093',\n  },\n}\n", "export default {\n  url: new RegExp(\n    // protocol identifier\n    '^(?:(?:(?:https?|ftp|rtmp):)?//)' +\n      // user:pass authentication\n      '(?:\\\\S+(?::\\\\S*)?@)?' +\n      '(?:' +\n      // IP address exclusion - private & local networks\n      // Reference: https://www.arin.net/knowledge/address_filters.html\n\n      // filter 10.*.*.* and 127.*.*.* addresses\n      '(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})' +\n      // filter 169.254.*.* and 192.168.*.*\n      '(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})' +\n      // filter 172.16.0.0 - 172.31.255.255\n      // TODO: add test to validate that it invalidates address in 16-31 range\n      '(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})' +\n      // IP address dotted notation octets\n      // excludes loopback network 0.0.0.0\n      // excludes reserved space >= 224.0.0.0\n      // excludes network & broadcast addresses\n      // (first & last IP address of each class)\n\n      // filter 1. part for 1-223\n      '(?:22[0-3]|2[01]\\\\d|[1-9]\\\\d?|1\\\\d\\\\d)' +\n      // filter 2. and 3. part for 0-255\n      '(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1?\\\\d{1,2})){2}' +\n      // filter 4. part for 1-254\n      '(?:\\\\.(?:25[0-4]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d?))' +\n      '|' +\n      // host name\n      '(?:(?:[a-z\\\\u00a1-\\\\uffff0-9_]-*)*[a-z\\\\u00a1-\\\\uffff0-9_]+)' +\n      // domain name\n      '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9_]-*)*[a-z\\\\u00a1-\\\\uffff0-9_]+)*' +\n      // TLD identifier\n      '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff_]{2,}))' +\n      ')' +\n      // port number\n      '(?::\\\\d{2,5})?' +\n      // resource path\n      '(?:/?\\\\S*)?$'\n  ),\n  email: /^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/,\n\n  ipv6: /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/,\n\n  ipv4: /^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$/,\n\n  number: /^[+-]?\\d+(\\.\\d+)?$/,\n\n  integer: /^[+-]?\\d+$/,\n\n  qq: /^(\\+?[1-9]\\d*|0)$/,\n\n  phone: /^\\d{3}-\\d{8}$|^\\d{4}-\\d{7}$|^\\d{11}$/,\n\n  idcard: /^\\d{15}$|^\\d{17}(\\d|x|X)$/,\n\n  money: /^([\\u0024\\u00A2\\u00A3\\u00A4\\u20AC\\u00A5\\u20B1\\u20B9\\uFFE5]\\s*)(\\d+,?)+\\.?\\d*\\s*$/,\n\n  zh: /^[\\u4e00-\\u9fa5]+$/,\n\n  date: /^[0-9]+[./-][0-9]+[./-][0-9]+\\s*(?:[0-9]+\\s*:\\s*[0-9]+\\s*:\\s*[0-9]+)?$/,\n\n  zip: /^[0-9]{6}$/,\n}\n", "import {\n  isEmpty,\n  isValid,\n  stringLength,\n  isStr,\n  isArr,\n  isFn,\n  toArr,\n  isBool,\n  isNum,\n  isEqual,\n  each,\n} from '@formily/shared'\nimport { getValidateFormats } from './registry'\nimport { IRegistryRules } from './types'\n\nconst isValidateEmpty = (value: any) => {\n  if (isArr(value)) {\n    for (let i = 0; i < value.length; i++) {\n      if (isValid(value[i])) return false\n    }\n    return true\n  } else {\n    //compat to draft-js\n    if (value?.getCurrentContent) {\n      /* istanbul ignore next */\n      return !value.getCurrentContent()?.hasText()\n    }\n    return isEmpty(value)\n  }\n}\n\nconst getLength = (value: any) =>\n  isStr(value) ? stringLength(value) : value ? value.length : 0\n\nconst extendSameRules = (\n  rules: IRegistryRules,\n  names: Record<string, string>\n) => {\n  each(names, (realName, name) => {\n    rules[name] = (value, rule, ...args) =>\n      rules[realName](value, { ...rule, [realName]: rule[name] }, ...args)\n  })\n}\n\nconst RULES: IRegistryRules = {\n  format(value, rule) {\n    if (isValidateEmpty(value)) return ''\n    if (rule.format) {\n      const format = getValidateFormats(rule.format)\n      if (format) {\n        return !new RegExp(format).test(value) ? rule.message : ''\n      }\n    }\n    return ''\n  },\n  required(value, rule) {\n    if (rule.required === false) return ''\n    return isValidateEmpty(value) ? rule.message : ''\n  },\n  max(value, rule) {\n    if (isValidateEmpty(value)) return ''\n    const length = isNum(value) ? value : getLength(value)\n    const max = Number(rule.max)\n    return length > max ? rule.message : ''\n  },\n  min(value, rule) {\n    if (isValidateEmpty(value)) return ''\n    const length = isNum(value) ? value : getLength(value)\n    const min = Number(rule.min)\n    return length < min ? rule.message : ''\n  },\n  exclusiveMaximum(value, rule) {\n    if (isValidateEmpty(value)) return ''\n    const length = isNum(value) ? value : getLength(value)\n    const max = Number(rule.exclusiveMaximum)\n    return length >= max ? rule.message : ''\n  },\n  exclusiveMinimum(value, rule) {\n    if (isValidateEmpty(value)) return ''\n    const length = isNum(value) ? value : getLength(value)\n    const min = Number(rule.exclusiveMinimum)\n    return length <= min ? rule.message : ''\n  },\n  len(value, rule) {\n    if (isValidateEmpty(value)) return ''\n    const length = getLength(value)\n    const len = Number(rule.len)\n    return length !== len ? rule.message : ''\n  },\n\n  pattern(value, rule) {\n    if (isValidateEmpty(value)) return ''\n    return !new RegExp(rule.pattern).test(value) ? rule.message : ''\n  },\n  async validator(value, rule, context, format) {\n    if (isFn(rule.validator)) {\n      const response = await Promise.resolve(\n        rule.validator(value, rule, context, format)\n      )\n      if (isBool(response)) {\n        return !response ? rule.message : ''\n      } else {\n        return response\n      }\n    }\n    /* istanbul ignore next */\n    throw new Error(\"The rule's validator property must be a function.\")\n  },\n  whitespace(value, rule) {\n    if (isValidateEmpty(value)) return ''\n    if (rule.whitespace) {\n      return /^\\s+$/.test(value) ? rule.message : ''\n    }\n  },\n  enum(value, rule) {\n    if (isValidateEmpty(value)) return ''\n    const enums = toArr(rule.enum)\n    return enums.indexOf(value) === -1 ? rule.message : ''\n  },\n  const(value, rule) {\n    if (isValidateEmpty(value)) return ''\n    return rule.const !== value ? rule.message : ''\n  },\n  multipleOf(value, rule) {\n    if (isValidateEmpty(value)) return ''\n    return Number(value) % Number(rule.multipleOf) !== 0 ? rule.message : ''\n  },\n  uniqueItems(value, rule) {\n    if (isValidateEmpty(value)) return ''\n    value = toArr(value)\n    return value.some((item: any, index: number) => {\n      for (let i = 0; i < value.length; i++) {\n        if (i !== index && !isEqual(value[i], item)) {\n          return false\n        }\n      }\n      return true\n    })\n      ? ''\n      : rule.message\n  },\n  maxProperties(value, rule) {\n    if (isValidateEmpty(value)) return ''\n    return Object.keys(value || {}).length <= Number(rule.maxProperties)\n      ? ''\n      : rule.message\n  },\n  minProperties(value, rule) {\n    if (isValidateEmpty(value)) return ''\n    return Object.keys(value || {}).length >= Number(rule.minProperties)\n      ? ''\n      : rule.message\n  },\n}\n\nextendSameRules(RULES, {\n  maximum: 'max',\n  minimum: 'min',\n  maxItems: 'max',\n  minItems: 'min',\n  maxLength: 'max',\n  minLength: 'min',\n})\n\nexport default RULES\n", "import { parseValidator } from './parser'\nimport { IValidateResults, Validator, IValidatorOptions } from './types'\nimport {\n  registerValidateFormats,\n  registerValidateLocale,\n  registerValidateRules,\n} from './registry'\nimport locales from './locale'\nimport formats from './formats'\nimport rules from './rules'\n\nregisterValidateRules(rules)\n\nregisterValidateLocale(locales)\n\nregisterValidateFormats(formats)\n\nexport const validate = async <Context = any>(\n  value: any,\n  validator: Validator<Context>,\n  options?: IValidatorOptions<Context>\n): Promise<IValidateResults> => {\n  const validates = parseValidator(validator, options)\n  const results: IValidateResults = {\n    error: [],\n    success: [],\n    warning: [],\n  }\n  for (let i = 0; i < validates.length; i++) {\n    const result = await validates[i](value, options?.context)\n    const { type, message } = result\n    results[type] = results[type] || []\n    if (message) {\n      results[type].push(message)\n      if (options?.validateFirst) break\n    }\n  }\n  return results\n}\n", "import {\n  IValidatorRules,\n  Validator,\n  ValidatorTriggerType,\n} from '@formily/validator'\nimport { FormPath } from '@formily/shared'\nimport {\n  Form,\n  Field,\n  LifeCycle,\n  ArrayField,\n  VoidField,\n  ObjectField,\n  Query,\n} from './models'\n\nexport type NonFunctionPropertyNames<T> = {\n  [K in keyof T]: T[K] extends (...args: any) => any ? never : K\n}[keyof T]\n\nexport type NonFunctionProperties<T> = Pick<T, NonFunctionPropertyNames<T>>\n\nexport type AnyFunction = (...args: any[]) => any\n\nexport type JSXComponent = any\n\nexport type LifeCycleHandler<T> = (payload: T, context: any) => void\n\nexport type LifeCyclePayload<T> = (\n  params: {\n    type: string\n    payload: T\n  },\n  context: any\n) => void\n\nexport enum LifeCycleTypes {\n  /**\n   * Form LifeCycle\n   **/\n\n  ON_FORM_INIT = 'onFormInit',\n  ON_FORM_MOUNT = 'onFormMount',\n  ON_FORM_UNMOUNT = 'onFormUnmount',\n\n  ON_FORM_INPUT_CHANGE = 'onFormInputChange',\n  ON_FORM_VALUES_CHANGE = 'onFormValuesChange',\n  ON_FORM_INITIAL_VALUES_CHANGE = 'onFormInitialValuesChange',\n\n  ON_FORM_SUBMIT = 'onFormSubmit',\n  ON_FORM_RESET = 'onFormReset',\n  ON_FORM_SUBMIT_START = 'onFormSubmitStart',\n  ON_FORM_SUBMITTING = 'onFormSubmitting',\n  ON_FORM_SUBMIT_END = 'onFormSubmitEnd',\n  ON_FORM_SUBMIT_VALIDATE_START = 'onFormSubmitValidateStart',\n  ON_FORM_SUBMIT_VALIDATE_SUCCESS = 'onFormSubmitValidateSuccess',\n  ON_FORM_SUBMIT_VALIDATE_FAILED = 'onFormSubmitValidateFailed',\n  ON_FORM_SUBMIT_VALIDATE_END = 'onFormSubmitValidateEnd',\n  ON_FORM_SUBMIT_SUCCESS = 'onFormSubmitSuccess',\n  ON_FORM_SUBMIT_FAILED = 'onFormSubmitFailed',\n  ON_FORM_VALIDATE_START = 'onFormValidateStart',\n  ON_FORM_VALIDATING = 'onFormValidating',\n  ON_FORM_VALIDATE_SUCCESS = 'onFormValidateSuccess',\n  ON_FORM_VALIDATE_FAILED = 'onFormValidateFailed',\n  ON_FORM_VALIDATE_END = 'onFormValidateEnd',\n\n  ON_FORM_GRAPH_CHANGE = 'onFormGraphChange',\n  ON_FORM_LOADING = 'onFormLoading',\n\n  /**\n   * Field LifeCycle\n   **/\n\n  ON_FIELD_INIT = 'onFieldInit',\n  ON_FIELD_INPUT_VALUE_CHANGE = 'onFieldInputValueChange',\n  ON_FIELD_VALUE_CHANGE = 'onFieldValueChange',\n  ON_FIELD_INITIAL_VALUE_CHANGE = 'onFieldInitialValueChange',\n\n  ON_FIELD_SUBMIT = 'onFieldSubmit',\n  ON_FIELD_SUBMIT_START = 'onFieldSubmitStart',\n  ON_FIELD_SUBMITTING = 'onFieldSubmitting',\n  ON_FIELD_SUBMIT_END = 'onFieldSubmitEnd',\n  ON_FIELD_SUBMIT_VALIDATE_START = 'onFieldSubmitValidateStart',\n  ON_FIELD_SUBMIT_VALIDATE_SUCCESS = 'onFieldSubmitValidateSuccess',\n  ON_FIELD_SUBMIT_VALIDATE_FAILED = 'onFieldSubmitValidateFailed',\n  ON_FIELD_SUBMIT_VALIDATE_END = 'onFieldSubmitValidateEnd',\n  ON_FIELD_SUBMIT_SUCCESS = 'onFieldSubmitSuccess',\n  ON_FIELD_SUBMIT_FAILED = 'onFieldSubmitFailed',\n  ON_FIELD_VALIDATE_START = 'onFieldValidateStart',\n  ON_FIELD_VALIDATING = 'onFieldValidating',\n  ON_FIELD_VALIDATE_SUCCESS = 'onFieldValidateSuccess',\n  ON_FIELD_VALIDATE_FAILED = 'onFieldValidateFailed',\n  ON_FIELD_VALIDATE_END = 'onFieldValidateEnd',\n\n  ON_FIELD_LOADING = 'onFieldLoading',\n  ON_FIELD_RESET = 'onFieldReset',\n  ON_FIELD_MOUNT = 'onFieldMount',\n  ON_FIELD_UNMOUNT = 'onFieldUnmount',\n}\n\nexport type HeartSubscriber = ({\n  type,\n  payload,\n}: {\n  type: string\n  payload: any\n}) => void\n\nexport interface INodePatch<T> {\n  type: 'remove' | 'update'\n  address: string\n  oldAddress?: string\n  payload?: T\n}\n\nexport interface IHeartProps<Context> {\n  lifecycles?: LifeCycle[]\n  context?: Context\n}\n\nexport interface IFieldFeedback {\n  triggerType?: FieldFeedbackTriggerTypes\n  type?: FieldFeedbackTypes\n  code?: FieldFeedbackCodeTypes\n  messages?: FeedbackMessage\n}\n\nexport type IFormFeedback = IFieldFeedback & {\n  path?: string\n  address?: string\n}\n\nexport interface ISearchFeedback {\n  triggerType?: FieldFeedbackTriggerTypes\n  type?: FieldFeedbackTypes\n  code?: FieldFeedbackCodeTypes\n  address?: FormPathPattern\n  path?: FormPathPattern\n  messages?: FeedbackMessage\n}\n\nexport type FeedbackMessage = any[]\n\nexport type IFieldUpdate = {\n  pattern: FormPath\n  callbacks: ((...args: any[]) => any)[]\n}\n\nexport interface IFormRequests {\n  validate?: NodeJS.Timeout\n  submit?: NodeJS.Timeout\n  loading?: NodeJS.Timeout\n  updates?: IFieldUpdate[]\n  updateIndexes?: Record<string, number>\n}\n\nexport type IFormFields = Record<string, GeneralField>\n\nexport type FieldFeedbackTypes = 'error' | 'success' | 'warning'\n\nexport type FieldFeedbackTriggerTypes = ValidatorTriggerType\n\nexport type FieldFeedbackCodeTypes =\n  | 'ValidateError'\n  | 'ValidateSuccess'\n  | 'ValidateWarning'\n  | 'EffectError'\n  | 'EffectSuccess'\n  | 'EffectWarning'\n  | (string & {})\n\nexport type FormPatternTypes =\n  | 'editable'\n  | 'readOnly'\n  | 'disabled'\n  | 'readPretty'\n  | ({} & string)\nexport type FormDisplayTypes = 'none' | 'hidden' | 'visible' | ({} & string)\n\nexport type FormPathPattern =\n  | string\n  | number\n  | Array<string | number>\n  | FormPath\n  | RegExp\n  | (((address: Array<string | number>) => boolean) & {\n      path: FormPath\n    })\n\ntype OmitState<P> = Omit<\n  P,\n  | 'selfDisplay'\n  | 'selfPattern'\n  | 'originValues'\n  | 'originInitialValues'\n  | 'id'\n  | 'address'\n  | 'path'\n  | 'lifecycles'\n  | 'disposers'\n  | 'requests'\n  | 'fields'\n  | 'graph'\n  | 'heart'\n  | 'indexes'\n  | 'props'\n  | 'displayName'\n  | 'setState'\n  | 'getState'\n  | 'getFormGraph'\n  | 'setFormGraph'\n  | 'setFormState'\n  | 'getFormState'\n>\n\nexport type IFieldState = Partial<\n  Pick<\n    Field,\n    NonFunctionPropertyNames<OmitState<Field<any, any, string, string>>>\n  >\n>\n\nexport type IVoidFieldState = Partial<\n  Pick<\n    VoidField,\n    NonFunctionPropertyNames<OmitState<VoidField<any, any, string>>>\n  >\n>\n\nexport type IFormState<T extends Record<any, any> = any> = Pick<\n  Form<T>,\n  NonFunctionPropertyNames<OmitState<Form<{ [key: string]: any }>>>\n>\n\nexport type IFormGraph = Record<string, IGeneralFieldState | IFormState>\n\nexport interface IFormProps<T extends object = any> {\n  values?: Partial<T>\n  initialValues?: Partial<T>\n  pattern?: FormPatternTypes\n  display?: FormDisplayTypes\n  hidden?: boolean\n  visible?: boolean\n  editable?: boolean\n  disabled?: boolean\n  readOnly?: boolean\n  readPretty?: boolean\n  effects?: (form: Form<T>) => void\n  validateFirst?: boolean\n  designable?: boolean\n}\n\nexport type IFormMergeStrategy =\n  | 'overwrite'\n  | 'merge'\n  | 'deepMerge'\n  | 'shallowMerge'\n\nexport interface IFieldFactoryProps<\n  Decorator extends JSXComponent,\n  Component extends JSXComponent,\n  TextType = any,\n  ValueType = any\n> extends IFieldProps<Decorator, Component, TextType, ValueType> {\n  name: FormPathPattern\n  basePath?: FormPathPattern\n}\n\nexport interface IVoidFieldFactoryProps<\n  Decorator extends JSXComponent,\n  Component extends JSXComponent,\n  TextType = any\n> extends IVoidFieldProps<Decorator, Component, TextType> {\n  name: FormPathPattern\n  basePath?: FormPathPattern\n}\n\nexport interface IFieldRequests {\n  validate?: NodeJS.Timeout\n  submit?: NodeJS.Timeout\n  loading?: NodeJS.Timeout\n  batch?: () => void\n}\n\nexport interface IFieldCaches {\n  value?: any\n  initialValue?: any\n  inputting?: boolean\n}\n\nexport type FieldDisplayTypes = 'none' | 'hidden' | 'visible' | ({} & string)\n\nexport type FieldPatternTypes =\n  | 'editable'\n  | 'readOnly'\n  | 'disabled'\n  | 'readPretty'\n  | ({} & string)\n\nexport type FieldValidatorContext = IValidatorRules & {\n  field?: Field\n  form?: Form\n  value?: any\n}\n\nexport type FieldValidator = Validator<FieldValidatorContext>\n\nexport type FieldDataSource = {\n  label?: any\n  value?: any\n  title?: any\n  key?: any\n  text?: any\n  children?: FieldDataSource\n  [key: string]: any\n}[]\n\nexport type FieldComponent<\n  Component extends JSXComponent,\n  ComponentProps = any\n> = [Component] | [Component, ComponentProps] | boolean | any[]\n\nexport type FieldDecorator<\n  Decorator extends JSXComponent,\n  ComponentProps = any\n> = [Decorator] | [Decorator, ComponentProps] | boolean | any[]\n\nexport type FieldReaction = (field: Field) => void\nexport interface IFieldProps<\n  Decorator extends JSXComponent = any,\n  Component extends JSXComponent = any,\n  TextType = any,\n  ValueType = any\n> {\n  name: FormPathPattern\n  basePath?: FormPathPattern\n  title?: TextType\n  description?: TextType\n  value?: ValueType\n  initialValue?: ValueType\n  required?: boolean\n  display?: FieldDisplayTypes\n  pattern?: FieldPatternTypes\n  hidden?: boolean\n  visible?: boolean\n  editable?: boolean\n  disabled?: boolean\n  readOnly?: boolean\n  readPretty?: boolean\n  dataSource?: FieldDataSource\n  validateFirst?: boolean\n  validator?: FieldValidator\n  decorator?: FieldDecorator<Decorator>\n  component?: FieldComponent<Component>\n  reactions?: FieldReaction[] | FieldReaction\n  content?: any\n  data?: any\n}\n\nexport interface IVoidFieldProps<\n  Decorator extends JSXComponent = any,\n  Component extends JSXComponent = any,\n  TextType = any\n> {\n  name: FormPathPattern\n  basePath?: FormPathPattern\n  title?: TextType\n  description?: TextType\n  display?: FieldDisplayTypes\n  pattern?: FieldPatternTypes\n  hidden?: boolean\n  visible?: boolean\n  editable?: boolean\n  disabled?: boolean\n  readOnly?: boolean\n  readPretty?: boolean\n  decorator?: FieldDecorator<Decorator>\n  component?: FieldComponent<Component>\n  reactions?: FieldReaction[] | FieldReaction\n  content?: any\n  data?: any\n}\n\nexport interface IFieldResetOptions {\n  forceClear?: boolean\n  validate?: boolean\n}\n\nexport type IGeneralFieldState = IFieldState & IVoidFieldState\n\nexport type GeneralField = Field | VoidField | ArrayField | ObjectField\n\nexport type DataField = Field | ArrayField | ObjectField\nexport interface ISpliceArrayStateProps {\n  startIndex?: number\n  deleteCount?: number\n  insertCount?: number\n}\n\nexport interface IExchangeArrayStateProps {\n  fromIndex?: number\n  toIndex?: number\n}\n\nexport interface IQueryProps {\n  pattern: FormPathPattern\n  base: FormPathPattern\n  form: Form\n}\n\nexport interface IModelSetter<P = any> {\n  (setter: (state: P) => void): void\n  (setter: Partial<P>): void\n  (): void\n}\n\nexport interface IModelGetter<P = any> {\n  <Getter extends (state: P) => any>(getter: Getter): ReturnType<Getter>\n  (): P\n}\n\nexport type FieldMatchPattern = FormPathPattern | Query | GeneralField\n\nexport interface IFieldStateSetter {\n  (pattern: FieldMatchPattern, setter: (state: IFieldState) => void): void\n  (pattern: FieldMatchPattern, setter: Partial<IFieldState>): void\n}\n\nexport interface IFieldStateGetter {\n  <Getter extends (state: IGeneralFieldState) => any>(\n    pattern: FieldMatchPattern,\n    getter: Getter\n  ): ReturnType<Getter>\n  (pattern: FieldMatchPattern): IGeneralFieldState\n}\n", "import { FormPath } from '@formily/shared'\nimport { Form } from '../models'\nimport { IFormProps } from '../types'\nimport {\n  getValidateLocaleIOSCode,\n  setValidateLanguage,\n  registerValidateFormats,\n  registerValidateLocale,\n  registerValidateMessageTemplateEngine,\n  registerValidateRules,\n} from '@formily/validator'\nimport {\n  createEffectHook,\n  createEffectContext,\n  useEffectForm,\n} from './effective'\nimport {\n  isArrayField,\n  isArrayFieldState,\n  isDataField,\n  isDataFieldState,\n  isField,\n  isFieldState,\n  isForm,\n  isFormState,\n  isGeneralField,\n  isGeneralFieldState,\n  isObjectField,\n  isObjectFieldState,\n  isQuery,\n  isVoidField,\n  isVoidFieldState,\n} from './checkers'\n\nconst createForm = <T extends object = any>(options?: IFormProps<T>) => {\n  return new Form(options)\n}\n\nexport {\n  FormPath,\n  createForm,\n  isArrayField,\n  isArrayFieldState,\n  isDataField,\n  isDataFieldState,\n  isField,\n  isFieldState,\n  isForm,\n  isFormState,\n  isGeneralField,\n  isGeneralFieldState,\n  isObjectField,\n  isObjectFieldState,\n  isQuery,\n  isVoidField,\n  isVoidFieldState,\n  getValidateLocaleIOSCode,\n  setValidateLanguage,\n  registerValidateFormats,\n  registerValidateLocale,\n  registerValidateMessageTemplateEngine,\n  registerValidateRules,\n  createEffectHook,\n  createEffectContext,\n  useEffectForm,\n}\n", "export const ReservedProperties = {\n  form: true,\n  parent: true,\n  props: true,\n  caches: true,\n  requests: true,\n  disposers: true,\n  heart: true,\n  graph: true,\n  indexes: true,\n  fields: true,\n  lifecycles: true,\n  componentType: true,\n  componentProps: true,\n  decoratorType: true,\n  decoratorProps: true,\n}\n\nexport const ReadOnlyProperties = {\n  address: true,\n  path: true,\n  valid: true,\n  invalid: true,\n  selfValid: true,\n  selfInvalid: true,\n  errors: true,\n  successes: true,\n  warnings: true,\n  validateStatus: true,\n}\n\nconst SELF_DISPLAY = 'selfDisplay'\nconst SELF_PATTERN = 'selfPattern'\n\nexport const MutuallyExclusiveProperties = {\n  pattern: SELF_PATTERN,\n  editable: SELF_PATTERN,\n  readOnly: SELF_PATTERN,\n  readPretty: SELF_PATTERN,\n  disabled: SELF_PATTERN,\n  display: SELF_DISPLAY,\n  hidden: SELF_DISPLAY,\n  visible: SELF_DISPLAY,\n}\n\nexport const RESPONSE_REQUEST_DURATION = 100\n\nexport const GlobalState = {\n  lifecycles: [],\n  context: [],\n  effectStart: false,\n  effectEnd: false,\n  initializing: false,\n}\n\nexport const NumberIndexReg = /^\\.(\\d+)/\n", "import { isFn, isValid } from '@formily/shared'\nimport { LifeCycle, Form } from '../models'\nimport { AnyFunction } from '../types'\nimport { isForm } from './checkers'\nimport { GlobalState } from './constants'\n\nexport const createEffectHook = <\n  F extends (payload: any, ...ctxs: any[]) => AnyFunction\n>(\n  type: string,\n  callback?: F\n) => {\n  return (...args: Parameters<ReturnType<F>>) => {\n    if (GlobalState.effectStart) {\n      GlobalState.lifecycles.push(\n        new LifeCycle(type, (payload, ctx) => {\n          if (isFn(callback)) {\n            callback(payload, ctx, ...GlobalState.context)(...args)\n          }\n        })\n      )\n    } else {\n      throw new Error(\n        'Effect hooks cannot be used in asynchronous function body'\n      )\n    }\n  }\n}\n\nexport const createEffectContext = <T = any>(defaultValue?: T) => {\n  let index: number\n  return {\n    provide(value?: T) {\n      if (GlobalState.effectStart) {\n        index = GlobalState.context.length\n        GlobalState.context[index] = isValid(value) ? value : defaultValue\n      } else {\n        throw new Error(\n          'Provide method cannot be used in asynchronous function body'\n        )\n      }\n    },\n    consume(): T {\n      if (!GlobalState.effectStart) {\n        throw new Error(\n          'Consume method cannot be used in asynchronous function body'\n        )\n      }\n      return GlobalState.context[index]\n    },\n  }\n}\n\nconst FormEffectContext = createEffectContext<Form>()\n\nexport const useEffectForm = FormEffectContext.consume\n\nexport const runEffects = <Context>(\n  context?: Context,\n  ...args: ((context: Context) => void)[]\n): LifeCycle[] => {\n  GlobalState.lifecycles = []\n  GlobalState.context = []\n  GlobalState.effectStart = true\n  GlobalState.effectEnd = false\n  if (isForm(context)) {\n    FormEffectContext.provide(context)\n  }\n  args.forEach((effects) => {\n    if (isFn(effects)) {\n      effects(context)\n    }\n  })\n  GlobalState.context = []\n  GlobalState.effectStart = false\n  GlobalState.effectEnd = true\n  return GlobalState.lifecycles\n}\n", "import {\n  FormPath,\n  FormPathPattern,\n  each,\n  pascalCase,\n  isFn,\n  isValid,\n  isUndef,\n  isEmpty,\n  isPlainObj,\n  isNumberLike,\n  clone,\n  toArr,\n} from '@formily/shared'\nimport {\n  ValidatorTriggerType,\n  validate,\n  parseValidatorDescriptions,\n} from '@formily/validator'\nimport {\n  autorun,\n  batch,\n  contains,\n  toJS,\n  isObservable,\n  DataChange,\n  reaction,\n  untracked,\n} from '@formily/reactive'\nimport { Field, ArrayField, Form, ObjectField } from '../models'\nimport {\n  ISpliceArrayStateProps,\n  IExchangeArrayStateProps,\n  IFieldResetOptions,\n  ISearchFeedback,\n  IFieldFeedback,\n  INodePatch,\n  GeneralField,\n  IFormFeedback,\n  LifeCycleTypes,\n  FieldMatchPattern,\n} from '../types'\nimport {\n  isArrayField,\n  isObjectField,\n  isGeneralField,\n  isDataField,\n  isForm,\n  isQuery,\n  isVoidField,\n} from './externals'\nimport {\n  RESPONSE_REQUEST_DURATION,\n  ReservedProperties,\n  MutuallyExclusiveProperties,\n  NumberIndexReg,\n  GlobalState,\n  ReadOnlyProperties,\n} from './constants'\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty\n\nconst notify = (\n  target: Form | Field,\n  formType: LifeCycleTypes,\n  fieldType: LifeCycleTypes\n) => {\n  if (isForm(target)) {\n    target.notify(formType)\n  } else {\n    target.notify(fieldType)\n  }\n}\n\nexport const isHTMLInputEvent = (event: any, stopPropagation = true) => {\n  if (event?.target) {\n    if (isValid(event.target.value) || isValid(event.target.checked))\n      return true\n    if (\n      event.target.tagName &&\n      event.target.tagName !== 'INPUT' &&\n      event.target.tagName !== 'TEXTAREA' &&\n      event.target.tagName !== 'SELECT'\n    ) {\n      return false\n    }\n    if (stopPropagation) event.stopPropagation?.()\n    return true\n  }\n  return false\n}\n\nexport const getValuesFromEvent = (args: any[]) => {\n  return args.map((event) => {\n    if (event?.target) {\n      if (isValid(event.target.value)) return event.target.value\n      if (isValid(event.target.checked)) return event.target.checked\n      return\n    }\n    return event\n  })\n}\n\nexport const getTypedDefaultValue = (field: Field) => {\n  if (isArrayField(field)) return []\n  if (isObjectField(field)) return {}\n}\n\nexport const buildFieldPath = (field: GeneralField) => {\n  return buildDataPath(field.form.fields, field.address)\n}\n\nexport const buildDataPath = (\n  fields: Record<string, GeneralField>,\n  pattern: FormPath\n) => {\n  let prevArray = false\n  const segments = pattern.segments\n  const path = segments.reduce((path: string[], key: string, index: number) => {\n    const currentPath = path.concat(key)\n    const currentAddress = segments.slice(0, index + 1)\n    const current = fields[currentAddress.join('.')]\n    if (prevArray) {\n      if (!isVoidField(current)) {\n        prevArray = false\n      }\n      return path\n    }\n    if (index >= segments.length - 1) {\n      return currentPath\n    }\n    if (isVoidField(current)) {\n      const parentAddress = segments.slice(0, index)\n      const parent = fields[parentAddress.join('.')]\n      if (isArrayField(parent) && isNumberLike(key)) {\n        prevArray = true\n        return currentPath\n      }\n      return path\n    } else {\n      prevArray = false\n    }\n    return currentPath\n  }, [])\n  return new FormPath(path)\n}\n\nexport const locateNode = (field: GeneralField, address: FormPathPattern) => {\n  field.address = FormPath.parse(address)\n  field.path = buildFieldPath(field)\n  field.form.indexes[field.path.toString()] = field.address.toString()\n  return field\n}\n\nexport const patchFieldStates = (\n  target: Record<string, GeneralField>,\n  patches: INodePatch<GeneralField>[]\n) => {\n  patches.forEach(({ type, address, oldAddress, payload }) => {\n    if (type === 'remove') {\n      destroy(target, address, false)\n    } else if (type === 'update') {\n      if (payload) {\n        target[address] = payload\n        if (target[oldAddress] === payload) {\n          target[oldAddress]?.dispose()\n          delete target[oldAddress]\n        }\n      }\n      if (address && payload) {\n        locateNode(payload, address)\n      }\n    }\n  })\n}\n\nexport const destroy = (\n  target: Record<string, GeneralField>,\n  address: string,\n  removeValue = true\n) => {\n  const field = target[address]\n  field?.dispose()\n  if (isDataField(field) && removeValue) {\n    const form = field.form\n    const path = field.path\n    form.deleteValuesIn(path)\n    form.deleteInitialValuesIn(path)\n  }\n  delete target[address]\n}\n\nexport const patchFormValues = (\n  form: Form,\n  path: Array<string | number>,\n  source: any\n) => {\n  const update = (path: Array<string | number>, source: any) => {\n    if (path.length) {\n      form.setValuesIn(path, clone(source))\n    } else {\n      Object.assign(form.values, clone(source))\n    }\n  }\n\n  const patch = (source: any, path: Array<string | number> = []) => {\n    const targetValue = form.getValuesIn(path)\n    const targetField = form.query(path).take()\n    if (allowAssignDefaultValue(targetValue, source)) {\n      update(path, source)\n    } else {\n      if (isEmpty(source)) return\n      if (GlobalState.initializing) return\n      if (isPlainObj(targetValue) && isPlainObj(source)) {\n        each(source, (value, key) => {\n          patch(value, path.concat(key))\n        })\n      } else {\n        if (targetField) {\n          if (!isVoidField(targetField) && !targetField.selfModified) {\n            update(path, source)\n          }\n        } else if (form.initialized) {\n          update(path, source)\n        }\n      }\n    }\n  }\n  patch(source, path)\n}\n\nexport const matchFeedback = (\n  search?: ISearchFeedback,\n  feedback?: IFormFeedback\n) => {\n  if (!search || !feedback) return false\n  if (search.type && search.type !== feedback.type) return false\n  if (search.code && search.code !== feedback.code) return false\n  if (search.path && feedback.path) {\n    if (!FormPath.parse(search.path).match(feedback.path)) return false\n  }\n  if (search.address && feedback.address) {\n    if (!FormPath.parse(search.address).match(feedback.address)) return false\n  }\n  if (search.triggerType && search.triggerType !== feedback.triggerType)\n    return false\n  return true\n}\n\nexport const queryFeedbacks = (field: Field, search?: ISearchFeedback) => {\n  return field.feedbacks.filter((feedback) => {\n    if (!feedback.messages?.length) return false\n    return matchFeedback(search, {\n      ...feedback,\n      address: field.address?.toString(),\n      path: field.path?.toString(),\n    })\n  })\n}\n\nexport const queryFeedbackMessages = (\n  field: Field,\n  search: ISearchFeedback\n) => {\n  if (!field.feedbacks.length) return []\n  return queryFeedbacks(field, search).reduce(\n    (buf, info) => (isEmpty(info.messages) ? buf : buf.concat(info.messages)),\n    []\n  )\n}\n\nexport const updateFeedback = (field: Field, feedback?: IFieldFeedback) => {\n  if (!feedback) return\n  return batch(() => {\n    if (!field.feedbacks.length) {\n      if (!feedback.messages?.length) {\n        return\n      }\n      field.feedbacks = [feedback]\n    } else {\n      const searched = queryFeedbacks(field, feedback)\n      if (searched.length) {\n        field.feedbacks = field.feedbacks.reduce((buf, item) => {\n          if (searched.includes(item)) {\n            if (feedback.messages?.length) {\n              item.messages = feedback.messages\n              return buf.concat(item)\n            } else {\n              return buf\n            }\n          } else {\n            return buf.concat(item)\n          }\n        }, [])\n        return\n      } else if (feedback.messages?.length) {\n        field.feedbacks = field.feedbacks.concat(feedback)\n      }\n    }\n  })\n}\n\nexport const validateToFeedbacks = async (\n  field: Field,\n  triggerType: ValidatorTriggerType = 'onInput'\n) => {\n  const results = await validate(field.value, field.validator, {\n    triggerType,\n    validateFirst: field.props.validateFirst || field.form.props.validateFirst,\n    context: { field, form: field.form },\n  })\n\n  batch(() => {\n    each(results, (messages, type) => {\n      field.setFeedback({\n        triggerType,\n        type,\n        code: pascalCase(`validate-${type}`),\n        messages: messages,\n      } as any)\n    })\n  })\n  return results\n}\n\nexport const setValidatorRule = (field: Field, name: string, value: any) => {\n  if (!isValid(value)) return\n  const validators = parseValidatorDescriptions(field.validator)\n  const hasRule = validators.some((desc) => name in desc)\n  const rule = {\n    [name]: value,\n  }\n  if (hasRule) {\n    field.validator = validators.map((desc: any) => {\n      if (isPlainObj(desc) && hasOwnProperty.call(desc, name)) {\n        desc[name] = value\n        return desc\n      }\n      return desc\n    })\n  } else {\n    if (name === 'required') {\n      field.validator = [rule].concat(validators)\n    } else {\n      field.validator = validators.concat(rule)\n    }\n  }\n}\n\nexport const spliceArrayState = (\n  field: ArrayField,\n  props?: ISpliceArrayStateProps\n) => {\n  const { startIndex, deleteCount, insertCount } = {\n    startIndex: 0,\n    deleteCount: 0,\n    insertCount: 0,\n    ...props,\n  }\n  const address = field.address.toString()\n  const addrLength = address.length\n  const form = field.form\n  const fields = form.fields\n  const fieldPatches: INodePatch<GeneralField>[] = []\n  const offset = insertCount - deleteCount\n  const isArrayChildren = (identifier: string) => {\n    return identifier.indexOf(address) === 0 && identifier.length > addrLength\n  }\n  const isAfterNode = (identifier: string) => {\n    const afterStr = identifier.substring(addrLength)\n    const number = afterStr.match(NumberIndexReg)?.[1]\n    if (number === undefined) return false\n    const index = Number(number)\n    return index > startIndex + deleteCount - 1\n  }\n  const isInsertNode = (identifier: string) => {\n    const afterStr = identifier.substring(addrLength)\n    const number = afterStr.match(NumberIndexReg)?.[1]\n    if (number === undefined) return false\n    const index = Number(number)\n    return index >= startIndex && index < startIndex + insertCount\n  }\n  const isDeleteNode = (identifier: string) => {\n    const preStr = identifier.substring(0, addrLength)\n    const afterStr = identifier.substring(addrLength)\n    const number = afterStr.match(NumberIndexReg)?.[1]\n    if (number === undefined) return false\n    const index = Number(number)\n    return (\n      index >= startIndex &&\n      !fields[\n        `${preStr}${afterStr.replace(/^\\.\\d+/, `.${index + deleteCount}`)}`\n      ]\n    )\n  }\n  const moveIndex = (identifier: string) => {\n    if (offset === 0) return identifier\n    const preStr = identifier.substring(0, addrLength)\n    const afterStr = identifier.substring(addrLength)\n    const number = afterStr.match(NumberIndexReg)?.[1]\n    if (number === undefined) return identifier\n    const index = Number(number) + offset\n    return `${preStr}${afterStr.replace(/^\\.\\d+/, `.${index}`)}`\n  }\n\n  batch(() => {\n    each(fields, (field, identifier) => {\n      if (isArrayChildren(identifier)) {\n        if (isAfterNode(identifier)) {\n          const newIdentifier = moveIndex(identifier)\n          fieldPatches.push({\n            type: 'update',\n            address: newIdentifier,\n            oldAddress: identifier,\n            payload: field,\n          })\n        }\n        if (isInsertNode(identifier) || isDeleteNode(identifier)) {\n          if (isDataField(field)) {\n            form.deleteInitialValuesIn(field.path)\n          }\n          fieldPatches.push({ type: 'remove', address: identifier })\n        }\n      }\n    })\n    patchFieldStates(fields, fieldPatches)\n  })\n  field.form.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE)\n}\n\nexport const exchangeArrayState = (\n  field: ArrayField,\n  props: IExchangeArrayStateProps\n) => {\n  const { fromIndex, toIndex } = {\n    fromIndex: 0,\n    toIndex: 0,\n    ...props,\n  }\n  const address = field.address.toString()\n  const fields = field.form.fields\n  const addrLength = address.length\n  const fieldPatches: INodePatch<GeneralField>[] = []\n  const isArrayChildren = (identifier: string) => {\n    return identifier.indexOf(address) === 0 && identifier.length > addrLength\n  }\n\n  const isDown = fromIndex < toIndex\n\n  const isMoveNode = (identifier: string) => {\n    const afterStr = identifier.slice(address.length)\n    const number = afterStr.match(NumberIndexReg)?.[1]\n    if (number === undefined) return false\n    const index = Number(number)\n    return isDown\n      ? index > fromIndex && index <= toIndex\n      : index < fromIndex && index >= toIndex\n  }\n\n  const isFromNode = (identifier: string) => {\n    const afterStr = identifier.substring(addrLength)\n    const number = afterStr.match(NumberIndexReg)?.[1]\n    if (number === undefined) return false\n    const index = Number(number)\n    return index === fromIndex\n  }\n\n  const moveIndex = (identifier: string) => {\n    const preStr = identifier.substring(0, addrLength)\n    const afterStr = identifier.substring(addrLength)\n    const number = afterStr.match(NumberIndexReg)[1]\n    const current = Number(number)\n    let index = current\n    if (index === fromIndex) {\n      index = toIndex\n    } else {\n      index += isDown ? -1 : 1\n    }\n\n    return `${preStr}${afterStr.replace(/^\\.\\d+/, `.${index}`)}`\n  }\n\n  batch(() => {\n    each(fields, (field, identifier) => {\n      if (isArrayChildren(identifier)) {\n        if (isMoveNode(identifier) || isFromNode(identifier)) {\n          const newIdentifier = moveIndex(identifier)\n          fieldPatches.push({\n            type: 'update',\n            address: newIdentifier,\n            oldAddress: identifier,\n            payload: field,\n          })\n          if (!fields[newIdentifier]) {\n            fieldPatches.push({\n              type: 'remove',\n              address: identifier,\n            })\n          }\n        }\n      }\n    })\n    patchFieldStates(fields, fieldPatches)\n  })\n  field.form.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE)\n}\n\nexport const cleanupArrayChildren = (field: ArrayField, start: number) => {\n  const address = field.address.toString()\n  const fields = field.form.fields\n\n  const isArrayChildren = (identifier: string) => {\n    return (\n      identifier.indexOf(address) === 0 && identifier.length > address.length\n    )\n  }\n\n  const isNeedCleanup = (identifier: string) => {\n    const afterStr = identifier.slice(address.length)\n    const numStr = afterStr.match(NumberIndexReg)?.[1]\n    if (numStr === undefined) return false\n    const index = Number(numStr)\n    return index >= start\n  }\n\n  batch(() => {\n    each(fields, (field, identifier) => {\n      if (isArrayChildren(identifier) && isNeedCleanup(identifier)) {\n        field.destroy()\n      }\n    })\n  })\n}\n\nexport const cleanupObjectChildren = (field: ObjectField, keys: string[]) => {\n  if (keys.length === 0) return\n  const address = field.address.toString()\n  const fields = field.form.fields\n\n  const isObjectChildren = (identifier: string) => {\n    return (\n      identifier.indexOf(address) === 0 && identifier.length > address.length\n    )\n  }\n\n  const isNeedCleanup = (identifier: string) => {\n    const afterStr = identifier.slice(address.length)\n    const key = afterStr.match(/^\\.([^.]+)/)?.[1]\n    if (key === undefined) return false\n    return keys.includes(key)\n  }\n\n  batch(() => {\n    each(fields, (field, identifier) => {\n      if (isObjectChildren(identifier) && isNeedCleanup(identifier)) {\n        field.destroy()\n      }\n    })\n  })\n}\n\nexport const initFieldUpdate = batch.scope.bound((field: GeneralField) => {\n  const form = field.form\n  const updates = FormPath.ensureIn(form, 'requests.updates', [])\n  const indexes = FormPath.ensureIn(form, 'requests.updateIndexes', {})\n  for (let index = 0; index < updates.length; index++) {\n    const { pattern, callbacks } = updates[index]\n    let removed = false\n    if (field.match(pattern)) {\n      callbacks.forEach((callback) => {\n        field.setState(callback)\n      })\n      if (!pattern.isWildMatchPattern && !pattern.isMatchPattern) {\n        updates.splice(index--, 1)\n        removed = true\n      }\n    }\n    if (!removed) {\n      indexes[pattern.toString()] = index\n    } else {\n      delete indexes[pattern.toString()]\n    }\n  }\n})\n\nexport const subscribeUpdate = (\n  form: Form,\n  pattern: FormPath,\n  callback: (...args: any[]) => void\n) => {\n  const updates = FormPath.ensureIn(form, 'requests.updates', [])\n  const indexes = FormPath.ensureIn(form, 'requests.updateIndexes', {})\n  const id = pattern.toString()\n  const current = indexes[id]\n  if (isValid(current)) {\n    if (\n      updates[current] &&\n      !updates[current].callbacks.some((fn: any) =>\n        fn.toString() === callback.toString() ? fn === callback : false\n      )\n    ) {\n      updates[current].callbacks.push(callback)\n    }\n  } else {\n    indexes[id] = updates.length\n    updates.push({\n      pattern,\n      callbacks: [callback],\n    })\n  }\n}\n\nexport const deserialize = (model: any, setter: any) => {\n  if (!model) return\n  if (isFn(setter)) {\n    setter(model)\n  } else {\n    for (let key in setter) {\n      if (!hasOwnProperty.call(setter, key)) continue\n      if (ReadOnlyProperties[key] || ReservedProperties[key]) continue\n      const MutuallyExclusiveKey = MutuallyExclusiveProperties[key]\n      if (\n        MutuallyExclusiveKey &&\n        hasOwnProperty.call(setter, MutuallyExclusiveKey) &&\n        !isValid(setter[MutuallyExclusiveKey])\n      )\n        continue\n      const value = setter[key]\n      if (isFn(value)) continue\n      model[key] = value\n    }\n  }\n  return model\n}\n\nexport const serialize = (model: any, getter?: any) => {\n  if (isFn(getter)) {\n    return getter(model)\n  } else {\n    const results = {}\n    for (let key in model) {\n      if (!hasOwnProperty.call(model, key)) continue\n      if (ReservedProperties[key]) continue\n      if (key === 'address' || key === 'path') {\n        results[key] = model[key].toString()\n        continue\n      }\n      const value = model[key]\n      if (isFn(value)) continue\n      results[key] = toJS(value)\n    }\n    return results\n  }\n}\n\nexport const createChildrenFeedbackFilter = (field: Field) => {\n  const identifier = field.address?.toString()\n  return ({ address }: IFormFeedback) => {\n    return address.indexOf(identifier) === 0\n  }\n}\n\nexport const createStateSetter = (model: any) => {\n  return batch.bound((setter?: any) => deserialize(model, setter))\n}\n\nexport const createStateGetter = (model: any) => {\n  return (getter?: any) => serialize(model, getter)\n}\n\nexport const createBatchStateSetter = (form: Form) => {\n  return batch.bound((pattern: FieldMatchPattern, payload?: any) => {\n    if (isQuery(pattern)) {\n      pattern.forEach((field) => {\n        field.setState(payload)\n      })\n    } else if (isGeneralField(pattern)) {\n      pattern.setState(payload)\n    } else {\n      let matchCount = 0,\n        path = FormPath.parse(pattern)\n      form.query(path).forEach((field) => {\n        field.setState(payload)\n        matchCount++\n      })\n\n      if (matchCount === 0 || path.isWildMatchPattern) {\n        subscribeUpdate(form, path, payload)\n      }\n    }\n  })\n}\n\nexport const createBatchStateGetter = (form: Form) => {\n  return (pattern: FieldMatchPattern, payload?: any) => {\n    if (isQuery(pattern)) {\n      return pattern.take(payload)\n    } else if (isGeneralField(pattern)) {\n      return (pattern as any).getState(payload)\n    } else {\n      return form.query(pattern).take((field: any) => {\n        return field.getState(payload)\n      })\n    }\n  }\n}\n\nexport const triggerFormInitialValuesChange = (\n  form: Form,\n  change: DataChange\n) => {\n  const path = change.path\n  if (Array.isArray(change.object) && change.key === 'length') return\n  if (\n    contains(form.initialValues, change.object) ||\n    contains(form.initialValues, change.value)\n  ) {\n    if (change.type === 'add' || change.type === 'set') {\n      patchFormValues(form, path.slice(1), change.value)\n    }\n    if (form.initialized) {\n      form.notify(LifeCycleTypes.ON_FORM_INITIAL_VALUES_CHANGE)\n    }\n  }\n}\n\nexport const triggerFormValuesChange = (form: Form, change: DataChange) => {\n  if (Array.isArray(change.object) && change.key === 'length') return\n  if (\n    (contains(form.values, change.object) ||\n      contains(form.values, change.value)) &&\n    form.initialized\n  ) {\n    form.notify(LifeCycleTypes.ON_FORM_VALUES_CHANGE)\n  }\n}\n\nexport const setValidating = (target: Form | Field, validating: boolean) => {\n  clearTimeout(target.requests.validate)\n  if (validating) {\n    target.requests.validate = setTimeout(() => {\n      batch(() => {\n        target.validating = validating\n        notify(\n          target,\n          LifeCycleTypes.ON_FORM_VALIDATING,\n          LifeCycleTypes.ON_FIELD_VALIDATING\n        )\n      })\n    }, RESPONSE_REQUEST_DURATION)\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_VALIDATE_START,\n      LifeCycleTypes.ON_FIELD_VALIDATE_START\n    )\n  } else {\n    if (target.validating !== validating) {\n      target.validating = validating\n    }\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_VALIDATE_END,\n      LifeCycleTypes.ON_FIELD_VALIDATE_END\n    )\n  }\n}\n\nexport const setSubmitting = (target: Form | Field, submitting: boolean) => {\n  clearTimeout(target.requests.submit)\n  if (submitting) {\n    target.requests.submit = setTimeout(() => {\n      batch(() => {\n        target.submitting = submitting\n        notify(\n          target,\n          LifeCycleTypes.ON_FORM_SUBMITTING,\n          LifeCycleTypes.ON_FIELD_SUBMITTING\n        )\n      })\n    }, RESPONSE_REQUEST_DURATION)\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_SUBMIT_START,\n      LifeCycleTypes.ON_FIELD_SUBMIT_START\n    )\n  } else {\n    if (target.submitting !== submitting) {\n      target.submitting = submitting\n    }\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_SUBMIT_END,\n      LifeCycleTypes.ON_FIELD_SUBMIT_END\n    )\n  }\n}\n\nexport const setLoading = (target: Form | Field, loading: boolean) => {\n  clearTimeout(target.requests.loading)\n  if (loading) {\n    target.requests.loading = setTimeout(() => {\n      batch(() => {\n        target.loading = loading\n        notify(\n          target,\n          LifeCycleTypes.ON_FORM_LOADING,\n          LifeCycleTypes.ON_FIELD_LOADING\n        )\n      })\n    }, RESPONSE_REQUEST_DURATION)\n  } else if (target.loading !== loading) {\n    target.loading = loading\n  }\n}\n\nexport const batchSubmit = async <T>(\n  target: Form | Field,\n  onSubmit?: (values: any) => Promise<T> | void\n): Promise<T> => {\n  const getValues = (target: Form | Field) => {\n    if (isForm(target)) {\n      return toJS(target.values)\n    }\n    return toJS(target.value)\n  }\n  target.setSubmitting(true)\n  try {\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_START,\n      LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_START\n    )\n    await target.validate()\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_SUCCESS,\n      LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_SUCCESS\n    )\n  } catch (e) {\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_FAILED,\n      LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_FAILED\n    )\n  }\n  notify(\n    target,\n    LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_END,\n    LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_END\n  )\n  let results: any\n  try {\n    if (target.invalid) {\n      throw target.errors\n    }\n    if (isFn(onSubmit)) {\n      results = await onSubmit(getValues(target))\n    } else {\n      results = getValues(target)\n    }\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_SUBMIT_SUCCESS,\n      LifeCycleTypes.ON_FIELD_SUBMIT_SUCCESS\n    )\n  } catch (e) {\n    target.setSubmitting(false)\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_SUBMIT_FAILED,\n      LifeCycleTypes.ON_FIELD_SUBMIT_FAILED\n    )\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_SUBMIT,\n      LifeCycleTypes.ON_FIELD_SUBMIT\n    )\n    throw e\n  }\n  target.setSubmitting(false)\n  notify(target, LifeCycleTypes.ON_FORM_SUBMIT, LifeCycleTypes.ON_FIELD_SUBMIT)\n  return results\n}\n\nexport const batchValidate = async (\n  target: Form | Field,\n  pattern: FormPathPattern,\n  triggerType?: ValidatorTriggerType\n) => {\n  if (isForm(target)) target.setValidating(true)\n  else {\n    if (target.pattern !== 'editable' || target.display !== 'visible') return\n  }\n  const tasks = []\n  target.query(pattern).forEach((field) => {\n    if (!isVoidField(field)) {\n      tasks.push(validateSelf(field, triggerType, field === target))\n    }\n  })\n  await Promise.all(tasks)\n  if (isForm(target)) target.setValidating(false)\n  if (target.invalid) {\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_VALIDATE_FAILED,\n      LifeCycleTypes.ON_FIELD_VALIDATE_FAILED\n    )\n    throw target.errors\n  }\n  notify(\n    target,\n    LifeCycleTypes.ON_FORM_VALIDATE_SUCCESS,\n    LifeCycleTypes.ON_FIELD_VALIDATE_SUCCESS\n  )\n}\n\nexport const batchReset = async (\n  target: Form | Field,\n  pattern: FormPathPattern,\n  options?: IFieldResetOptions\n) => {\n  const tasks = []\n  target.query(pattern).forEach((field) => {\n    if (!isVoidField(field)) {\n      tasks.push(resetSelf(field, options, target === field))\n    }\n  })\n  if (isForm(target)) {\n    target.modified = false\n  }\n  notify(target, LifeCycleTypes.ON_FORM_RESET, LifeCycleTypes.ON_FIELD_RESET)\n  await Promise.all(tasks)\n}\n\nexport const validateSelf = batch.bound(\n  async (target: Field, triggerType?: ValidatorTriggerType, noEmit = false) => {\n    const start = () => {\n      setValidating(target, true)\n    }\n    const end = () => {\n      setValidating(target, false)\n      if (noEmit) return\n      if (target.selfValid) {\n        target.notify(LifeCycleTypes.ON_FIELD_VALIDATE_SUCCESS)\n      } else {\n        target.notify(LifeCycleTypes.ON_FIELD_VALIDATE_FAILED)\n      }\n    }\n\n    if (target.pattern !== 'editable' || target.display !== 'visible') return {}\n    start()\n    if (!triggerType) {\n      const allTriggerTypes = parseValidatorDescriptions(\n        target.validator\n      ).reduce(\n        (types, desc) =>\n          types.indexOf(desc.triggerType) > -1\n            ? types\n            : types.concat(desc.triggerType),\n        []\n      )\n      const results = {}\n      for (let i = 0; i < allTriggerTypes.length; i++) {\n        const payload = await validateToFeedbacks(target, allTriggerTypes[i])\n        each(payload, (result, key) => {\n          results[key] = results[key] || []\n          results[key] = results[key].concat(result)\n        })\n      }\n      end()\n      return results\n    }\n    const results = await validateToFeedbacks(target, triggerType)\n    end()\n    return results\n  }\n)\n\nexport const resetSelf = batch.bound(\n  async (target: Field, options?: IFieldResetOptions, noEmit = false) => {\n    const typedDefaultValue = getTypedDefaultValue(target)\n    target.modified = false\n    target.selfModified = false\n    target.visited = false\n    target.feedbacks = []\n    target.inputValue = typedDefaultValue\n    target.inputValues = []\n    target.caches = {}\n    if (!isUndef(target.value)) {\n      if (options?.forceClear) {\n        target.value = typedDefaultValue\n      } else {\n        target.value = toJS(\n          !isUndef(target.initialValue)\n            ? target.initialValue\n            : typedDefaultValue\n        )\n      }\n    }\n    if (!noEmit) {\n      target.notify(LifeCycleTypes.ON_FIELD_RESET)\n    }\n    if (options?.validate) {\n      return await validateSelf(target)\n    }\n  }\n)\n\nexport const modifySelf = (target: Field) => {\n  if (target.selfModified) return\n  target.selfModified = true\n  target.modified = true\n  let parent = target.parent\n  while (parent) {\n    if (isDataField(parent)) {\n      if (parent.modified) return\n      parent.modified = true\n    }\n    parent = parent.parent\n  }\n  target.form.modified = true\n}\n\nexport const getValidFormValues = (values: any) => {\n  if (isObservable(values)) return values\n  return clone(values || {})\n}\n\nexport const getValidFieldDefaultValue = (value: any, initialValue: any) => {\n  if (allowAssignDefaultValue(value, initialValue)) return clone(initialValue)\n  return value\n}\n\nexport const allowAssignDefaultValue = (target: any, source: any) => {\n  const isEmptyTarget = target !== null && isEmpty(target)\n  const isEmptySource = source !== null && isEmpty(source)\n  const isValidTarget = !isUndef(target)\n  const isValidSource = !isUndef(source)\n  if (!isValidTarget) {\n    if (isValidSource) {\n      return true\n    }\n    return false\n  }\n\n  if (typeof target === typeof source) {\n    if (target === '') return false\n    if (target === 0) return false\n  }\n\n  if (isEmptyTarget) {\n    if (isEmptySource) {\n      return false\n    } else {\n      return true\n    }\n  }\n  return false\n}\n\nexport const createReactions = (field: GeneralField) => {\n  const reactions = toArr(field.props.reactions)\n  field.form.addEffects(field, () => {\n    reactions.forEach((reaction) => {\n      if (isFn(reaction)) {\n        field.disposers.push(autorun(batch.scope.bound(() => reaction(field))))\n      }\n    })\n  })\n}\n\nexport const createReaction = <T>(\n  tracker: () => T,\n  scheduler?: (value: T) => void\n) => {\n  return reaction(tracker, untracked.bound(scheduler))\n}\n\nexport const initializeStart = () => {\n  GlobalState.initializing = true\n}\n\nexport const initializeEnd = () => {\n  batch.endpoint(() => {\n    GlobalState.initializing = false\n  })\n}\n", "import { FormPath, FormPathPattern, isValid, toArr } from '@formily/shared'\nimport {\n  JSXComponent,\n  LifeCycleTypes,\n  FieldDisplayTypes,\n  FieldPatternTypes,\n  FieldDecorator,\n  FieldComponent,\n} from '../types'\nimport { locateNode, destroy, initFieldUpdate } from '../shared/internals'\nimport { Form } from './Form'\nimport { Query } from './Query'\n\nexport class BaseField<Decorator = any, Component = any, TextType = any> {\n  title: TextType\n  description: TextType\n\n  selfDisplay: FieldDisplayTypes\n  selfPattern: FieldPatternTypes\n  initialized: boolean\n  mounted: boolean\n  unmounted: boolean\n\n  content: any\n\n  data: any\n\n  decoratorType: Decorator\n  decoratorProps: Record<string, any>\n  componentType: Component\n  componentProps: Record<string, any>\n\n  designable: boolean\n  address: FormPath\n  path: FormPath\n  form: Form\n\n  disposers: (() => void)[] = []\n\n  locate(address: FormPathPattern) {\n    this.form.fields[address.toString()] = this as any\n    locateNode(this as any, address)\n  }\n\n  get indexes() {\n    return this.path.transform(/\\d/, (...args) =>\n      args.map((index) => Number(index))\n    )\n  }\n\n  get index() {\n    return this.indexes[this.indexes.length - 1]\n  }\n\n  get component() {\n    return [this.componentType, this.componentProps]\n  }\n\n  set component(value: FieldComponent<Component>) {\n    const component = toArr(value)\n    this.componentType = component[0]\n    this.componentProps = component[1] || {}\n  }\n\n  get decorator() {\n    return [this.decoratorType, this.decoratorProps]\n  }\n\n  set decorator(value: FieldDecorator<Decorator>) {\n    const decorator = toArr(value)\n    this.decoratorType = decorator[0]\n    this.decoratorProps = decorator[1] || {}\n  }\n\n  get parent() {\n    let parent = this.address.parent()\n    let identifier = parent.toString()\n    while (!this.form.fields[identifier]) {\n      parent = parent.parent()\n      identifier = parent.toString()\n      if (!identifier) return\n    }\n    return this.form.fields[identifier]\n  }\n\n  get display(): FieldDisplayTypes {\n    const parentDisplay = (this.parent as any)?.display\n    if (parentDisplay && parentDisplay !== 'visible') {\n      if (this.selfDisplay && this.selfDisplay !== 'visible')\n        return this.selfDisplay\n      return parentDisplay\n    }\n    if (isValid(this.selfDisplay)) return this.selfDisplay\n    return parentDisplay || this.form.display || 'visible'\n  }\n\n  get pattern(): FieldPatternTypes {\n    const parentPattern = (this.parent as any)?.pattern\n    if (isValid(this.selfPattern)) return this.selfPattern\n    return parentPattern || this.form.pattern || 'editable'\n  }\n\n  get editable() {\n    return this.pattern === 'editable'\n  }\n\n  get disabled() {\n    return this.pattern === 'disabled'\n  }\n\n  get readOnly() {\n    return this.pattern === 'readOnly'\n  }\n\n  get readPretty() {\n    return this.pattern === 'readPretty'\n  }\n\n  get hidden() {\n    return this.display === 'hidden'\n  }\n\n  get visible() {\n    return this.display === 'visible'\n  }\n\n  set hidden(hidden: boolean) {\n    if (!isValid(hidden)) return\n    if (hidden) {\n      this.display = 'hidden'\n    } else {\n      this.display = 'visible'\n    }\n  }\n\n  set visible(visible: boolean) {\n    if (!isValid(visible)) return\n    if (visible) {\n      this.display = 'visible'\n    } else {\n      this.display = 'none'\n    }\n  }\n\n  set editable(editable: boolean) {\n    if (!isValid(editable)) return\n    if (editable) {\n      this.pattern = 'editable'\n    } else {\n      this.pattern = 'readPretty'\n    }\n  }\n\n  set readOnly(readOnly: boolean) {\n    if (!isValid(readOnly)) return\n    if (readOnly) {\n      this.pattern = 'readOnly'\n    } else {\n      this.pattern = 'editable'\n    }\n  }\n\n  set disabled(disabled: boolean) {\n    if (!isValid(disabled)) return\n    if (disabled) {\n      this.pattern = 'disabled'\n    } else {\n      this.pattern = 'editable'\n    }\n  }\n\n  set readPretty(readPretty: boolean) {\n    if (!isValid(readPretty)) return\n    if (readPretty) {\n      this.pattern = 'readPretty'\n    } else {\n      this.pattern = 'editable'\n    }\n  }\n\n  set pattern(pattern: FieldPatternTypes) {\n    this.selfPattern = pattern\n  }\n\n  set display(display: FieldDisplayTypes) {\n    this.selfDisplay = display\n  }\n\n  setTitle = (title?: TextType) => {\n    this.title = title\n  }\n\n  setDescription = (description?: TextType) => {\n    this.description = description\n  }\n\n  setDisplay = (type?: FieldDisplayTypes) => {\n    this.display = type\n  }\n\n  setPattern = (type?: FieldPatternTypes) => {\n    this.pattern = type\n  }\n\n  setComponent = <C extends JSXComponent, ComponentProps extends object = {}>(\n    component?: C,\n    props?: ComponentProps\n  ) => {\n    if (component) {\n      this.componentType = component as any\n    }\n    if (props) {\n      this.componentProps = this.componentProps || {}\n      Object.assign(this.componentProps, props)\n    }\n  }\n\n  setComponentProps = <ComponentProps extends object = {}>(\n    props?: ComponentProps\n  ) => {\n    if (props) {\n      this.componentProps = this.componentProps || {}\n      Object.assign(this.componentProps, props)\n    }\n  }\n\n  setDecorator = <D extends JSXComponent, ComponentProps extends object = {}>(\n    component?: D,\n    props?: ComponentProps\n  ) => {\n    if (component) {\n      this.decoratorType = component as any\n    }\n    if (props) {\n      this.decoratorProps = this.decoratorProps || {}\n      Object.assign(this.decoratorProps, props)\n    }\n  }\n\n  setDecoratorProps = <ComponentProps extends object = {}>(\n    props?: ComponentProps\n  ) => {\n    if (props) {\n      this.decoratorProps = this.decoratorProps || {}\n      Object.assign(this.decoratorProps, props)\n    }\n  }\n\n  setData = (data: any) => {\n    this.data = data\n  }\n\n  setContent = (content: any) => {\n    this.content = content\n  }\n\n  onInit = () => {\n    this.initialized = true\n    initFieldUpdate(this as any)\n    this.notify(LifeCycleTypes.ON_FIELD_INIT)\n  }\n\n  onMount = () => {\n    this.mounted = true\n    this.unmounted = false\n    this.notify(LifeCycleTypes.ON_FIELD_MOUNT)\n  }\n\n  onUnmount = () => {\n    this.mounted = false\n    this.unmounted = true\n    this.notify(LifeCycleTypes.ON_FIELD_UNMOUNT)\n  }\n\n  query = (pattern: FormPathPattern | RegExp) => {\n    return new Query({\n      pattern,\n      base: this.address,\n      form: this.form,\n    })\n  }\n\n  notify = (type: LifeCycleTypes, payload?: any) => {\n    return this.form.notify(type, payload ?? this)\n  }\n\n  dispose = () => {\n    this.disposers.forEach((dispose) => {\n      dispose()\n    })\n    this.form.removeEffects(this)\n  }\n\n  destroy = (forceClear = true) => {\n    destroy(this.form.fields, this.address.toString(), forceClear)\n  }\n\n  match = (pattern: FormPathPattern) => {\n    return FormPath.parse(pattern).matchAliasGroup(this.address, this.path)\n  }\n}\n", "import {\n  isValid,\n  isEmpty,\n  toArr,\n  FormPathPattern,\n  isArr,\n} from '@formily/shared'\nimport {\n  ValidatorTriggerType,\n  parseValidatorDescriptions,\n} from '@formily/validator'\nimport { define, observable, batch, toJS, action } from '@formily/reactive'\nimport {\n  JSXComponent,\n  LifeCycleTypes,\n  IFieldFeedback,\n  FeedbackMessage,\n  IFieldCaches,\n  IFieldRequests,\n  FieldValidator,\n  FieldDataSource,\n  ISearchFeedback,\n  IFieldProps,\n  IFieldResetOptions,\n  IFieldState,\n  IModelSetter,\n  IModelGetter,\n} from '../types'\nimport {\n  updateFeedback,\n  queryFeedbacks,\n  allowAssignDefaultValue,\n  queryFeedbackMessages,\n  getValuesFromEvent,\n  createReactions,\n  createStateSetter,\n  createStateGetter,\n  isHTMLInputEvent,\n  setValidatorRule,\n  batchValidate,\n  batchSubmit,\n  batchReset,\n  setValidating,\n  setSubmitting,\n  setLoading,\n  validateSelf,\n  modifySelf,\n  getValidFieldDefaultValue,\n  initializeStart,\n  initializeEnd,\n  createChildrenFeedbackFilter,\n  createReaction,\n} from '../shared/internals'\nimport { Form } from './Form'\nimport { BaseField } from './BaseField'\nimport { IFormFeedback } from '..'\nexport class Field<\n  Decorator extends JSXComponent = any,\n  Component extends JSXComponent = any,\n  TextType = any,\n  ValueType = any\n> extends BaseField<Decorator, Component, TextType> {\n  displayName = 'Field'\n\n  props: IFieldProps<Decorator, Component, TextType, ValueType>\n\n  loading: boolean\n  validating: boolean\n  submitting: boolean\n  active: boolean\n  visited: boolean\n  selfModified: boolean\n  modified: boolean\n  inputValue: ValueType\n  inputValues: any[]\n  dataSource: FieldDataSource\n  validator: FieldValidator\n  feedbacks: IFieldFeedback[]\n  caches: IFieldCaches = {}\n  requests: IFieldRequests = {}\n\n  constructor(\n    address: FormPathPattern,\n    props: IFieldProps<Decorator, Component, TextType, ValueType>,\n    form: Form,\n    designable: boolean\n  ) {\n    super()\n    this.form = form\n    this.props = props\n    this.designable = designable\n    initializeStart()\n    this.locate(address)\n    this.initialize()\n    this.makeObservable()\n    this.makeReactive()\n    this.onInit()\n    initializeEnd()\n  }\n\n  protected initialize() {\n    this.initialized = false\n    this.loading = false\n    this.validating = false\n    this.submitting = false\n    this.selfModified = false\n    this.active = false\n    this.visited = false\n    this.mounted = false\n    this.unmounted = false\n    this.inputValues = []\n    this.inputValue = null\n    this.feedbacks = []\n    this.title = this.props.title\n    this.description = this.props.description\n    this.display = this.props.display\n    this.pattern = this.props.pattern\n    this.editable = this.props.editable\n    this.disabled = this.props.disabled\n    this.readOnly = this.props.readOnly\n    this.readPretty = this.props.readPretty\n    this.visible = this.props.visible\n    this.hidden = this.props.hidden\n    this.dataSource = this.props.dataSource\n    this.validator = this.props.validator\n    this.required = this.props.required\n    this.content = this.props.content\n    this.value = getValidFieldDefaultValue(\n      this.props.value,\n      this.props.initialValue\n    )\n    this.initialValue = this.props.initialValue\n    this.data = this.props.data\n    this.decorator = toArr(this.props.decorator)\n    this.component = toArr(this.props.component)\n  }\n\n  protected makeObservable() {\n    if (this.designable) return\n    define(this, {\n      path: observable.ref,\n      title: observable.ref,\n      description: observable.ref,\n      dataSource: observable.ref,\n      selfDisplay: observable.ref,\n      selfPattern: observable.ref,\n      loading: observable.ref,\n      validating: observable.ref,\n      submitting: observable.ref,\n      selfModified: observable.ref,\n      modified: observable.ref,\n      active: observable.ref,\n      visited: observable.ref,\n      initialized: observable.ref,\n      mounted: observable.ref,\n      unmounted: observable.ref,\n      inputValue: observable.ref,\n      inputValues: observable.ref,\n      decoratorType: observable.ref,\n      componentType: observable.ref,\n      content: observable.ref,\n      decoratorProps: observable,\n      componentProps: observable,\n      validator: observable.shallow,\n      feedbacks: observable.shallow,\n      data: observable.shallow,\n      component: observable.computed,\n      decorator: observable.computed,\n      errors: observable.computed,\n      warnings: observable.computed,\n      successes: observable.computed,\n      valid: observable.computed,\n      invalid: observable.computed,\n      selfErrors: observable.computed,\n      selfWarnings: observable.computed,\n      selfSuccesses: observable.computed,\n      selfValid: observable.computed,\n      selfInvalid: observable.computed,\n      validateStatus: observable.computed,\n      value: observable.computed,\n      initialValue: observable.computed,\n      display: observable.computed,\n      pattern: observable.computed,\n      required: observable.computed,\n      hidden: observable.computed,\n      visible: observable.computed,\n      disabled: observable.computed,\n      readOnly: observable.computed,\n      readPretty: observable.computed,\n      editable: observable.computed,\n      indexes: observable.computed,\n      setDisplay: action,\n      setTitle: action,\n      setDescription: action,\n      setDataSource: action,\n      setValue: action,\n      setPattern: action,\n      setInitialValue: action,\n      setLoading: action,\n      setValidating: action,\n      setFeedback: action,\n      setSelfErrors: action,\n      setSelfWarnings: action,\n      setSelfSuccesses: action,\n      setValidator: action,\n      setRequired: action,\n      setComponent: action,\n      setComponentProps: action,\n      setDecorator: action,\n      setDecoratorProps: action,\n      setData: action,\n      setContent: action,\n      validate: action,\n      reset: action,\n      onInit: batch,\n      onInput: batch,\n      onMount: batch,\n      onUnmount: batch,\n      onFocus: batch,\n      onBlur: batch,\n    })\n  }\n\n  protected makeReactive() {\n    if (this.designable) return\n    this.disposers.push(\n      createReaction(\n        () => this.value,\n        (value) => {\n          this.notify(LifeCycleTypes.ON_FIELD_VALUE_CHANGE)\n          if (isValid(value) && this.selfModified && !this.caches.inputting) {\n            validateSelf(this)\n          }\n        }\n      ),\n      createReaction(\n        () => this.initialValue,\n        () => {\n          this.notify(LifeCycleTypes.ON_FIELD_INITIAL_VALUE_CHANGE)\n        }\n      ),\n      createReaction(\n        () => this.display,\n        (display) => {\n          const value = this.value\n          if (display === 'visible') {\n            if (isEmpty(value)) {\n              this.setValue(this.caches.value)\n              this.caches.value = undefined\n            }\n          } else {\n            this.caches.value = toJS(value) ?? toJS(this.initialValue)\n            if (display === 'none') {\n              this.form.deleteValuesIn(this.path)\n            }\n          }\n          if (display === 'none' || display === 'hidden') {\n            this.setFeedback({\n              type: 'error',\n              messages: [],\n            })\n          }\n        }\n      ),\n      createReaction(\n        () => this.pattern,\n        (pattern) => {\n          if (pattern !== 'editable') {\n            this.setFeedback({\n              type: 'error',\n              messages: [],\n            })\n          }\n        }\n      )\n    )\n    createReactions(this)\n  }\n\n  get selfErrors(): FeedbackMessage {\n    return queryFeedbackMessages(this, {\n      type: 'error',\n    })\n  }\n\n  get errors(): IFormFeedback[] {\n    return this.form.errors.filter(createChildrenFeedbackFilter(this))\n  }\n\n  get selfWarnings(): FeedbackMessage {\n    return queryFeedbackMessages(this, {\n      type: 'warning',\n    })\n  }\n\n  get warnings(): IFormFeedback[] {\n    return this.form.warnings.filter(createChildrenFeedbackFilter(this))\n  }\n\n  get selfSuccesses(): FeedbackMessage {\n    return queryFeedbackMessages(this, {\n      type: 'success',\n    })\n  }\n\n  get successes(): IFormFeedback[] {\n    return this.form.successes.filter(createChildrenFeedbackFilter(this))\n  }\n\n  get selfValid() {\n    return !this.selfErrors.length\n  }\n\n  get valid() {\n    return !this.errors.length\n  }\n\n  get selfInvalid() {\n    return !this.selfValid\n  }\n\n  get invalid() {\n    return !this.valid\n  }\n\n  get value(): ValueType {\n    return this.form.getValuesIn(this.path)\n  }\n\n  get initialValue(): ValueType {\n    return this.form.getInitialValuesIn(this.path)\n  }\n\n  get required() {\n    const validators = isArr(this.validator)\n      ? this.validator\n      : parseValidatorDescriptions(this.validator)\n    return validators.some((desc) => !!desc?.['required'])\n  }\n\n  get validateStatus() {\n    if (this.validating) return 'validating'\n    if (this.selfInvalid) return 'error'\n    if (this.selfWarnings.length) return 'warning'\n    if (this.selfSuccesses.length) return 'success'\n  }\n\n  set required(required: boolean) {\n    if (this.required === required) return\n    this.setValidatorRule('required', required)\n  }\n\n  set value(value: ValueType) {\n    if (!this.initialized) {\n      if (this.display === 'none') {\n        this.caches.value = value\n        return\n      }\n      if (!allowAssignDefaultValue(this.value, value) && !this.designable) {\n        return\n      }\n    }\n    this.form.setValuesIn(this.path, value)\n  }\n\n  set initialValue(initialValue: ValueType) {\n    if (!this.initialized) {\n      if (\n        !allowAssignDefaultValue(this.initialValue, initialValue) &&\n        !this.designable\n      ) {\n        return\n      }\n    }\n    this.form.setInitialValuesIn(this.path, initialValue)\n  }\n\n  set selfErrors(messages: FeedbackMessage) {\n    this.setFeedback({\n      type: 'error',\n      code: 'EffectError',\n      messages,\n    })\n  }\n\n  set selfWarnings(messages: FeedbackMessage) {\n    this.setFeedback({\n      type: 'warning',\n      code: 'EffectWarning',\n      messages,\n    })\n  }\n\n  set selfSuccesses(messages: FeedbackMessage) {\n    this.setFeedback({\n      type: 'success',\n      code: 'EffectSuccess',\n      messages,\n    })\n  }\n\n  setDataSource = (dataSource?: FieldDataSource) => {\n    this.dataSource = dataSource\n  }\n\n  setFeedback = (feedback?: IFieldFeedback) => {\n    updateFeedback(this, feedback)\n  }\n\n  setSelfErrors = (messages?: FeedbackMessage) => {\n    this.selfErrors = messages\n  }\n\n  setSelfWarnings = (messages?: FeedbackMessage) => {\n    this.selfWarnings = messages\n  }\n\n  setSelfSuccesses = (messages?: FeedbackMessage) => {\n    this.selfSuccesses = messages\n  }\n\n  setValidator = (validator?: FieldValidator) => {\n    this.validator = validator\n  }\n\n  setValidatorRule = (name: string, value: any) => {\n    setValidatorRule(this, name, value)\n  }\n\n  setRequired = (required?: boolean) => {\n    this.required = required\n  }\n\n  setValue = (value?: ValueType) => {\n    this.value = value\n  }\n\n  setInitialValue = (initialValue?: ValueType) => {\n    this.initialValue = initialValue\n  }\n\n  setLoading = (loading?: boolean) => {\n    setLoading(this, loading)\n  }\n\n  setValidating = (validating?: boolean) => {\n    setValidating(this, validating)\n  }\n\n  setSubmitting = (submitting?: boolean) => {\n    setSubmitting(this, submitting)\n  }\n\n  setState: IModelSetter<IFieldState> = createStateSetter(this)\n\n  getState: IModelGetter<IFieldState> = createStateGetter(this)\n\n  onInput = async (...args: any[]) => {\n    if (args[0]?.target) {\n      if (!isHTMLInputEvent(args[0])) return\n    }\n    const values = getValuesFromEvent(args)\n    const value = values[0]\n    this.caches.inputting = true\n    this.inputValue = value\n    this.inputValues = values\n    this.value = value\n    this.modify()\n    this.notify(LifeCycleTypes.ON_FIELD_INPUT_VALUE_CHANGE)\n    this.notify(LifeCycleTypes.ON_FORM_INPUT_CHANGE, this.form)\n    await validateSelf(this, 'onInput')\n    this.caches.inputting = false\n  }\n\n  onFocus = async (...args: any[]) => {\n    if (args[0]?.target) {\n      if (!isHTMLInputEvent(args[0], false)) return\n    }\n    this.active = true\n    this.visited = true\n    await validateSelf(this, 'onFocus')\n  }\n\n  onBlur = async (...args: any[]) => {\n    if (args[0]?.target) {\n      if (!isHTMLInputEvent(args[0], false)) return\n    }\n    this.active = false\n    await validateSelf(this, 'onBlur')\n  }\n\n  validate = (triggerType?: ValidatorTriggerType) => {\n    return batchValidate(this, `${this.address}.**`, triggerType)\n  }\n\n  submit = <T>(onSubmit?: (values: any) => Promise<T> | void): Promise<T> => {\n    return batchSubmit(this, onSubmit)\n  }\n\n  reset = (options?: IFieldResetOptions) => {\n    return batchReset(this, `${this.address}.**`, options)\n  }\n\n  queryFeedbacks = (search?: ISearchFeedback): IFieldFeedback[] => {\n    return queryFeedbacks(this, search)\n  }\n\n  modify = () => modifySelf(this)\n}\n", "import { isArr } from '@formily/shared'\nimport { action, reaction } from '@formily/reactive'\nimport {\n  spliceArrayState,\n  exchangeArrayState,\n  cleanupArrayChildren,\n} from '../shared/internals'\nimport { Field } from './Field'\nimport { Form } from './Form'\nimport { JSXComponent, IFieldProps, FormPathPattern } from '../types'\n\nexport class ArrayField<\n  Decorator extends JSXComponent = any,\n  Component extends JSXComponent = any\n> extends Field<Decorator, Component, any, any[]> {\n  displayName = 'ArrayField'\n\n  constructor(\n    address: FormPathPattern,\n    props: IFieldProps<Decorator, Component>,\n    form: Form,\n    designable: boolean\n  ) {\n    super(address, props, form, designable)\n    this.makeAutoCleanable()\n  }\n\n  protected makeAutoCleanable() {\n    this.disposers.push(\n      reaction(\n        () => this.value?.length,\n        (newLength, oldLength) => {\n          if (oldLength && !newLength) {\n            cleanupArrayChildren(this, 0)\n          } else if (newLength < oldLength) {\n            cleanupArrayChildren(this, newLength)\n          }\n        }\n      )\n    )\n  }\n\n  push = (...items: any[]) => {\n    return action(() => {\n      if (!isArr(this.value)) {\n        this.value = []\n      }\n      this.value.push(...items)\n      return this.onInput(this.value)\n    })\n  }\n\n  pop = () => {\n    if (!isArr(this.value)) return\n    return action(() => {\n      const index = this.value.length - 1\n      spliceArrayState(this, {\n        startIndex: index,\n        deleteCount: 1,\n      })\n      this.value.pop()\n      return this.onInput(this.value)\n    })\n  }\n\n  insert = (index: number, ...items: any[]) => {\n    return action(() => {\n      if (!isArr(this.value)) {\n        this.value = []\n      }\n      spliceArrayState(this, {\n        startIndex: index,\n        insertCount: items.length,\n      })\n      this.value.splice(index, 0, ...items)\n      return this.onInput(this.value)\n    })\n  }\n\n  remove = (index: number) => {\n    if (!isArr(this.value)) return\n    return action(() => {\n      spliceArrayState(this, {\n        startIndex: index,\n        deleteCount: 1,\n      })\n      this.value.splice(index, 1)\n      return this.onInput(this.value)\n    })\n  }\n\n  shift = () => {\n    if (!isArr(this.value)) return\n    return action(() => {\n      this.value.shift()\n      return this.onInput(this.value)\n    })\n  }\n\n  unshift = (...items: any[]) => {\n    return action(() => {\n      if (!isArr(this.value)) {\n        this.value = []\n      }\n      spliceArrayState(this, {\n        startIndex: 0,\n        insertCount: items.length,\n      })\n      this.value.unshift(...items)\n      return this.onInput(this.value)\n    })\n  }\n\n  move = (fromIndex: number, toIndex: number) => {\n    if (!isArr(this.value)) return\n    if (fromIndex === toIndex) return\n    return action(() => {\n      const fromItem = this.value[fromIndex]\n      this.value.splice(fromIndex, 1)\n      this.value.splice(toIndex, 0, fromItem)\n      exchangeArrayState(this, {\n        fromIndex,\n        toIndex,\n      })\n      return this.onInput(this.value)\n    })\n  }\n\n  moveUp = (index: number) => {\n    if (!isArr(this.value)) return\n    return this.move(index, index - 1 < 0 ? this.value.length - 1 : index - 1)\n  }\n\n  moveDown = (index: number) => {\n    if (!isArr(this.value)) return\n    return this.move(index, index + 1 >= this.value.length ? 0 : index + 1)\n  }\n}\n", "import { reaction } from '@formily/reactive'\nimport { cleanupObjectChildren } from '../shared/internals'\nimport { JSXComponent, IFieldProps, FormPathPattern } from '../types'\nimport { Field } from './Field'\nimport { Form } from './Form'\n\nexport class ObjectField<\n  Decorator extends JSXComponent = any,\n  Component extends JSXComponent = any\n> extends Field<Decorator, Component, any, Record<string, any>> {\n  displayName = 'ObjectField'\n  private additionalProperties: string[] = []\n  constructor(\n    address: FormPathPattern,\n    props: IFieldProps<Decorator, Component>,\n    form: Form,\n    designable: boolean\n  ) {\n    super(address, props, form, designable)\n    this.makeAutoCleanable()\n  }\n\n  protected makeAutoCleanable() {\n    this.disposers.push(\n      reaction(\n        () => Object.keys(this.value || {}),\n        (newKeys) => {\n          const filterKeys = this.additionalProperties.filter(\n            (key) => !newKeys.includes(key)\n          )\n          cleanupObjectChildren(this, filterKeys)\n        }\n      )\n    )\n  }\n\n  addProperty = (key: string, value: any) => {\n    this.form.setValuesIn(this.path.concat(key), value)\n    this.additionalProperties.push(key)\n    return this.onInput(this.value)\n  }\n\n  removeProperty = (key: string) => {\n    this.form.deleteValuesIn(this.path.concat(key))\n    this.additionalProperties.splice(this.additionalProperties.indexOf(key), 1)\n    return this.onInput(this.value)\n  }\n\n  existProperty = (key: string) => {\n    return this.form.existValuesIn(this.path.concat(key))\n  }\n}\n", "import { toArr, FormPathPattern } from '@formily/shared'\nimport { define, observable, batch, action } from '@formily/reactive'\nimport {\n  createReactions,\n  createStateSetter,\n  createStateGetter,\n  initializeStart,\n  initializeEnd,\n} from '../shared/internals'\nimport {\n  IModelSetter,\n  IModelGetter,\n  IVoidFieldProps,\n  IVoidFieldState,\n} from '../types'\nimport { Form } from './Form'\nimport { BaseField } from './BaseField'\n\nexport class VoidField<\n  Decorator = any,\n  Component = any,\n  TextType = any\n> extends BaseField<Decorator, Component, TextType> {\n  displayName: 'VoidField' = 'VoidField'\n  props: IVoidFieldProps<Decorator, Component>\n\n  constructor(\n    address: FormPathPattern,\n    props: IVoidFieldProps<Decorator, Component>,\n    form: Form,\n    designable: boolean\n  ) {\n    super()\n    this.form = form\n    this.props = props\n    this.designable = designable\n    initializeStart()\n    this.locate(address)\n    this.initialize()\n    this.makeObservable()\n    this.makeReactive()\n    this.onInit()\n    initializeEnd()\n  }\n\n  protected initialize() {\n    this.mounted = false\n    this.unmounted = false\n    this.initialized = false\n    this.title = this.props.title\n    this.description = this.props.description\n    this.pattern = this.props.pattern\n    this.display = this.props.display\n    this.hidden = this.props.hidden\n    this.editable = this.props.editable\n    this.disabled = this.props.disabled\n    this.readOnly = this.props.readOnly\n    this.readPretty = this.props.readPretty\n    this.visible = this.props.visible\n    this.content = this.props.content\n    this.data = this.props.data\n    this.decorator = toArr(this.props.decorator)\n    this.component = toArr(this.props.component)\n  }\n\n  protected makeObservable() {\n    if (this.designable) return\n    define(this, {\n      path: observable.ref,\n      title: observable.ref,\n      description: observable.ref,\n      selfDisplay: observable.ref,\n      selfPattern: observable.ref,\n      initialized: observable.ref,\n      mounted: observable.ref,\n      unmounted: observable.ref,\n      decoratorType: observable.ref,\n      componentType: observable.ref,\n      content: observable.ref,\n      data: observable.shallow,\n      decoratorProps: observable,\n      componentProps: observable,\n      display: observable.computed,\n      pattern: observable.computed,\n      hidden: observable.computed,\n      visible: observable.computed,\n      disabled: observable.computed,\n      readOnly: observable.computed,\n      readPretty: observable.computed,\n      editable: observable.computed,\n      component: observable.computed,\n      decorator: observable.computed,\n      indexes: observable.computed,\n      setTitle: action,\n      setDescription: action,\n      setDisplay: action,\n      setPattern: action,\n      setComponent: action,\n      setComponentProps: action,\n      setDecorator: action,\n      setDecoratorProps: action,\n      setData: action,\n      setContent: action,\n      onInit: batch,\n      onMount: batch,\n      onUnmount: batch,\n    })\n  }\n\n  protected makeReactive() {\n    if (this.designable) return\n    createReactions(this)\n  }\n\n  setState: IModelSetter<IVoidFieldState> = createStateSetter(this)\n\n  getState: IModelGetter<IVoidFieldState> = createStateGetter(this)\n}\n", "import { define, observable, batch, action, observe } from '@formily/reactive'\nimport {\n  FormPath,\n  FormPathPattern,\n  isValid,\n  uid,\n  globalThisPolyfill,\n  merge,\n  isPlainObj,\n  isArr,\n  isObj,\n} from '@formily/shared'\nimport { Heart } from './Heart'\nimport { Field } from './Field'\nimport {\n  JSXComponent,\n  LifeCycleTypes,\n  HeartSubscriber,\n  FormPatternTypes,\n  IFormRequests,\n  IFormFeedback,\n  ISearchFeedback,\n  IFormGraph,\n  IFormProps,\n  IFieldResetOptions,\n  IFormFields,\n  IFieldFactoryProps,\n  IVoidFieldFactoryProps,\n  IFormState,\n  IModelGetter,\n  IModelSetter,\n  IFieldStateGetter,\n  IFieldStateSetter,\n  FormDisplayTypes,\n  IFormMergeStrategy,\n} from '../types'\nimport {\n  createStateGetter,\n  createStateSetter,\n  createBatchStateSetter,\n  createBatchStateGetter,\n  triggerFormInitialValuesChange,\n  triggerFormValuesChange,\n  batchValidate,\n  batchReset,\n  batchSubmit,\n  setValidating,\n  setSubmitting,\n  setLoading,\n  getValidFormValues,\n} from '../shared/internals'\nimport { isVoidField } from '../shared/checkers'\nimport { runEffects } from '../shared/effective'\nimport { ArrayField } from './ArrayField'\nimport { ObjectField } from './ObjectField'\nimport { VoidField } from './VoidField'\nimport { Query } from './Query'\nimport { Graph } from './Graph'\n\nconst DEV_TOOLS_HOOK = '__FORMILY_DEV_TOOLS_HOOK__'\n\nexport class Form<ValueType extends object = any> {\n  displayName = 'Form'\n  id: string\n  initialized: boolean\n  validating: boolean\n  submitting: boolean\n  loading: boolean\n  modified: boolean\n  pattern: FormPatternTypes\n  display: FormDisplayTypes\n  values: ValueType\n  initialValues: ValueType\n  mounted: boolean\n  unmounted: boolean\n  props: IFormProps<ValueType>\n  heart: Heart\n  graph: Graph\n  fields: IFormFields = {}\n  requests: IFormRequests = {}\n  indexes: Record<string, string> = {}\n  disposers: (() => void)[] = []\n\n  constructor(props: IFormProps<ValueType>) {\n    this.initialize(props)\n    this.makeObservable()\n    this.makeReactive()\n    this.makeValues()\n    this.onInit()\n  }\n\n  protected initialize(props: IFormProps<ValueType>) {\n    this.id = uid()\n    this.props = { ...props }\n    this.initialized = false\n    this.submitting = false\n    this.validating = false\n    this.loading = false\n    this.modified = false\n    this.mounted = false\n    this.unmounted = false\n    this.display = this.props.display || 'visible'\n    this.pattern = this.props.pattern || 'editable'\n    this.editable = this.props.editable\n    this.disabled = this.props.disabled\n    this.readOnly = this.props.readOnly\n    this.readPretty = this.props.readPretty\n    this.visible = this.props.visible\n    this.hidden = this.props.hidden\n    this.graph = new Graph(this)\n    this.heart = new Heart({\n      lifecycles: this.lifecycles,\n      context: this,\n    })\n  }\n\n  protected makeValues() {\n    this.values = getValidFormValues(this.props.values)\n    this.initialValues = getValidFormValues(this.props.initialValues)\n  }\n\n  protected makeObservable() {\n    define(this, {\n      fields: observable.shallow,\n      initialized: observable.ref,\n      validating: observable.ref,\n      submitting: observable.ref,\n      loading: observable.ref,\n      modified: observable.ref,\n      pattern: observable.ref,\n      display: observable.ref,\n      mounted: observable.ref,\n      unmounted: observable.ref,\n      values: observable,\n      initialValues: observable,\n      valid: observable.computed,\n      invalid: observable.computed,\n      errors: observable.computed,\n      warnings: observable.computed,\n      successes: observable.computed,\n      hidden: observable.computed,\n      visible: observable.computed,\n      editable: observable.computed,\n      readOnly: observable.computed,\n      readPretty: observable.computed,\n      disabled: observable.computed,\n      setValues: action,\n      setValuesIn: action,\n      setInitialValues: action,\n      setInitialValuesIn: action,\n      setPattern: action,\n      setDisplay: action,\n      setState: action,\n      deleteInitialValuesIn: action,\n      deleteValuesIn: action,\n      setSubmitting: action,\n      setValidating: action,\n      setFormGraph: action,\n      clearFormGraph: action,\n      reset: action,\n      submit: action,\n      validate: action,\n      onMount: batch,\n      onUnmount: batch,\n      onInit: batch,\n    })\n  }\n\n  protected makeReactive() {\n    this.disposers.push(\n      observe(\n        this,\n        (change) => {\n          triggerFormInitialValuesChange(this, change)\n          triggerFormValuesChange(this, change)\n        },\n        true\n      )\n    )\n  }\n\n  get valid() {\n    return !this.invalid\n  }\n\n  get invalid() {\n    return this.errors.length > 0\n  }\n\n  get errors() {\n    return this.queryFeedbacks({\n      type: 'error',\n    })\n  }\n\n  get warnings() {\n    return this.queryFeedbacks({\n      type: 'warning',\n    })\n  }\n\n  get successes() {\n    return this.queryFeedbacks({\n      type: 'success',\n    })\n  }\n\n  get lifecycles() {\n    return runEffects(this, this.props.effects)\n  }\n\n  get hidden() {\n    return this.display === 'hidden'\n  }\n\n  get visible() {\n    return this.display === 'visible'\n  }\n\n  set hidden(hidden: boolean) {\n    if (!isValid(hidden)) return\n    if (hidden) {\n      this.display = 'hidden'\n    } else {\n      this.display = 'visible'\n    }\n  }\n\n  set visible(visible: boolean) {\n    if (!isValid(visible)) return\n    if (visible) {\n      this.display = 'visible'\n    } else {\n      this.display = 'none'\n    }\n  }\n\n  get editable() {\n    return this.pattern === 'editable'\n  }\n\n  set editable(editable) {\n    if (!isValid(editable)) return\n    if (editable) {\n      this.pattern = 'editable'\n    } else {\n      this.pattern = 'readPretty'\n    }\n  }\n\n  get readOnly() {\n    return this.pattern === 'readOnly'\n  }\n\n  set readOnly(readOnly) {\n    if (!isValid(readOnly)) return\n    if (readOnly) {\n      this.pattern = 'readOnly'\n    } else {\n      this.pattern = 'editable'\n    }\n  }\n\n  get disabled() {\n    return this.pattern === 'disabled'\n  }\n\n  set disabled(disabled) {\n    if (!isValid(disabled)) return\n    if (disabled) {\n      this.pattern = 'disabled'\n    } else {\n      this.pattern = 'editable'\n    }\n  }\n\n  get readPretty() {\n    return this.pattern === 'readPretty'\n  }\n\n  set readPretty(readPretty) {\n    if (!isValid(readPretty)) return\n    if (readPretty) {\n      this.pattern = 'readPretty'\n    } else {\n      this.pattern = 'editable'\n    }\n  }\n\n  /** \u521B\u5EFA\u5B57\u6BB5 **/\n\n  createField = <\n    Decorator extends JSXComponent,\n    Component extends JSXComponent\n  >(\n    props: IFieldFactoryProps<Decorator, Component>\n  ) => {\n    const address = FormPath.parse(props.basePath).concat(props.name)\n    const identifier = address.toString()\n    if (!identifier) return\n    if (!this.fields[identifier] || this.props.designable) {\n      batch(() => {\n        new Field(address, props, this, this.props.designable)\n      })\n      this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE)\n    }\n    return this.fields[identifier] as Field<Decorator, Component>\n  }\n\n  createArrayField = <\n    Decorator extends JSXComponent,\n    Component extends JSXComponent\n  >(\n    props: IFieldFactoryProps<Decorator, Component>\n  ) => {\n    const address = FormPath.parse(props.basePath).concat(props.name)\n    const identifier = address.toString()\n    if (!identifier) return\n    if (!this.fields[identifier] || this.props.designable) {\n      batch(() => {\n        new ArrayField(\n          address,\n          {\n            ...props,\n            value: isArr(props.value) ? props.value : [],\n          },\n          this,\n          this.props.designable\n        )\n      })\n      this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE)\n    }\n    return this.fields[identifier] as ArrayField<Decorator, Component>\n  }\n\n  createObjectField = <\n    Decorator extends JSXComponent,\n    Component extends JSXComponent\n  >(\n    props: IFieldFactoryProps<Decorator, Component>\n  ) => {\n    const address = FormPath.parse(props.basePath).concat(props.name)\n    const identifier = address.toString()\n    if (!identifier) return\n    if (!this.fields[identifier] || this.props.designable) {\n      batch(() => {\n        new ObjectField(\n          address,\n          {\n            ...props,\n            value: isObj(props.value) ? props.value : {},\n          },\n          this,\n          this.props.designable\n        )\n      })\n      this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE)\n    }\n    return this.fields[identifier] as ObjectField<Decorator, Component>\n  }\n\n  createVoidField = <\n    Decorator extends JSXComponent,\n    Component extends JSXComponent\n  >(\n    props: IVoidFieldFactoryProps<Decorator, Component>\n  ) => {\n    const address = FormPath.parse(props.basePath).concat(props.name)\n    const identifier = address.toString()\n    if (!identifier) return\n    if (!this.fields[identifier] || this.props.designable) {\n      batch(() => {\n        new VoidField(address, props, this, this.props.designable)\n      })\n      this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE)\n    }\n    return this.fields[identifier] as VoidField<Decorator, Component>\n  }\n\n  /** \u72B6\u6001\u64CD\u4F5C\u6A21\u578B **/\n\n  setValues = (values: any, strategy: IFormMergeStrategy = 'merge') => {\n    if (!isPlainObj(values)) return\n    if (strategy === 'merge' || strategy === 'deepMerge') {\n      this.values = merge(this.values, values, {\n        arrayMerge: (target, source) => source,\n      })\n    } else if (strategy === 'shallowMerge') {\n      this.values = Object.assign(this.values, values)\n    } else {\n      this.values = values as any\n    }\n  }\n\n  setInitialValues = (\n    initialValues: any,\n    strategy: IFormMergeStrategy = 'merge'\n  ) => {\n    if (!isPlainObj(initialValues)) return\n    if (strategy === 'merge' || strategy === 'deepMerge') {\n      this.initialValues = merge(this.initialValues, initialValues, {\n        arrayMerge: (target, source) => source,\n      })\n    } else if (strategy === 'shallowMerge') {\n      this.initialValues = Object.assign(this.initialValues, initialValues)\n    } else {\n      this.initialValues = initialValues as any\n    }\n  }\n\n  setValuesIn = (pattern: FormPathPattern, value: any) => {\n    FormPath.setIn(this.values, pattern, value)\n  }\n\n  deleteValuesIn = (pattern: FormPathPattern) => {\n    FormPath.deleteIn(this.values, pattern)\n  }\n\n  existValuesIn = (pattern: FormPathPattern) => {\n    return FormPath.existIn(this.values, pattern)\n  }\n\n  getValuesIn = (pattern: FormPathPattern) => {\n    return FormPath.getIn(this.values, pattern)\n  }\n\n  setInitialValuesIn = (pattern: FormPathPattern, initialValue: any) => {\n    FormPath.setIn(this.initialValues, pattern, initialValue)\n  }\n\n  deleteInitialValuesIn = (pattern: FormPathPattern) => {\n    FormPath.deleteIn(this.initialValues, pattern)\n  }\n\n  existInitialValuesIn = (pattern: FormPathPattern) => {\n    return FormPath.existIn(this.initialValues, pattern)\n  }\n\n  getInitialValuesIn = (pattern: FormPathPattern) => {\n    return FormPath.getIn(this.initialValues, pattern)\n  }\n\n  setLoading = (loading: boolean) => {\n    setLoading(this, loading)\n  }\n\n  setSubmitting = (submitting: boolean) => {\n    setSubmitting(this, submitting)\n  }\n\n  setValidating = (validating: boolean) => {\n    setValidating(this, validating)\n  }\n\n  setDisplay = (display: FormDisplayTypes) => {\n    this.display = display\n  }\n\n  setPattern = (pattern: FormPatternTypes) => {\n    this.pattern = pattern\n  }\n\n  addEffects = (id: any, effects: IFormProps['effects']) => {\n    if (!this.heart.hasLifeCycles(id)) {\n      this.heart.addLifeCycles(id, runEffects(this, effects))\n    }\n  }\n\n  removeEffects = (id: any) => {\n    this.heart.removeLifeCycles(id)\n  }\n\n  setEffects = (effects: IFormProps['effects']) => {\n    this.heart.setLifeCycles(runEffects(this, effects))\n  }\n\n  clearErrors = (pattern: FormPathPattern = '*') => {\n    this.query(pattern).forEach((field) => {\n      if (!isVoidField(field)) {\n        field.setFeedback({\n          type: 'error',\n          messages: [],\n        })\n      }\n    })\n  }\n\n  clearWarnings = (pattern: FormPathPattern = '*') => {\n    this.query(pattern).forEach((field) => {\n      if (!isVoidField(field)) {\n        field.setFeedback({\n          type: 'warning',\n          messages: [],\n        })\n      }\n    })\n  }\n\n  clearSuccesses = (pattern: FormPathPattern = '*') => {\n    this.query(pattern).forEach((field) => {\n      if (!isVoidField(field)) {\n        field.setFeedback({\n          type: 'success',\n          messages: [],\n        })\n      }\n    })\n  }\n\n  query = (pattern: FormPathPattern): Query => {\n    return new Query({\n      pattern,\n      base: '',\n      form: this,\n    })\n  }\n\n  queryFeedbacks = (search: ISearchFeedback): IFormFeedback[] => {\n    return this.query(search.address || search.path || '*').reduce(\n      (messages, field) => {\n        if (isVoidField(field)) return messages\n        return messages.concat(\n          field\n            .queryFeedbacks(search)\n            .map((feedback) => ({\n              ...feedback,\n              address: field.address.toString(),\n              path: field.path.toString(),\n            }))\n            .filter((feedback) => feedback.messages.length > 0)\n        )\n      },\n      []\n    )\n  }\n\n  notify = (type: string, payload?: any) => {\n    this.heart.publish(type, payload ?? this)\n  }\n\n  subscribe = (subscriber?: HeartSubscriber) => {\n    return this.heart.subscribe(subscriber)\n  }\n\n  unsubscribe = (id: number) => {\n    this.heart.unsubscribe(id)\n  }\n\n  /**\u4E8B\u4EF6\u94A9\u5B50**/\n\n  onInit = () => {\n    this.initialized = true\n    this.notify(LifeCycleTypes.ON_FORM_INIT)\n  }\n\n  onMount = () => {\n    this.mounted = true\n    this.notify(LifeCycleTypes.ON_FORM_MOUNT)\n    if (globalThisPolyfill[DEV_TOOLS_HOOK] && !this.props.designable) {\n      globalThisPolyfill[DEV_TOOLS_HOOK].inject(this.id, this)\n    }\n  }\n\n  onUnmount = () => {\n    this.notify(LifeCycleTypes.ON_FORM_UNMOUNT)\n    this.query('*').forEach((field) => field.destroy(false))\n    this.disposers.forEach((dispose) => dispose())\n    this.unmounted = true\n    this.indexes = {}\n    this.heart.clear()\n    if (globalThisPolyfill[DEV_TOOLS_HOOK] && !this.props.designable) {\n      globalThisPolyfill[DEV_TOOLS_HOOK].unmount(this.id)\n    }\n  }\n\n  setState: IModelSetter<IFormState<ValueType>> = createStateSetter(this)\n\n  getState: IModelGetter<IFormState<ValueType>> = createStateGetter(this)\n\n  setFormState: IModelSetter<IFormState<ValueType>> = createStateSetter(this)\n\n  getFormState: IModelGetter<IFormState<ValueType>> = createStateGetter(this)\n\n  setFieldState: IFieldStateSetter = createBatchStateSetter(this)\n\n  getFieldState: IFieldStateGetter = createBatchStateGetter(this)\n\n  getFormGraph = () => {\n    return this.graph.getGraph()\n  }\n\n  setFormGraph = (graph: IFormGraph) => {\n    this.graph.setGraph(graph)\n  }\n\n  clearFormGraph = (pattern: FormPathPattern = '*') => {\n    this.query(pattern).forEach((field) => {\n      field.destroy()\n    })\n  }\n\n  validate = (pattern: FormPathPattern = '*') => {\n    return batchValidate(this, pattern)\n  }\n\n  submit = <T>(onSubmit?: (values: any) => Promise<T> | void): Promise<T> => {\n    return batchSubmit(this, onSubmit)\n  }\n\n  reset = (pattern: FormPathPattern = '*', options?: IFieldResetOptions) => {\n    return batchReset(this, pattern, options)\n  }\n}\n", "import { autorun, batch } from '@formily/reactive'\nimport { Form } from '../models'\nimport { LifeCycleTypes } from '../types'\nimport { createEffectHook } from '../shared/effective'\n\nfunction createFormEffect(type: LifeCycleTypes) {\n  return createEffectHook(\n    type,\n    (form: Form) => (callback: (form: Form) => void) => {\n      batch(() => {\n        callback(form)\n      })\n    }\n  )\n}\n\nexport const onFormInit = createFormEffect(LifeCycleTypes.ON_FORM_INIT)\nexport const onFormMount = createFormEffect(LifeCycleTypes.ON_FORM_MOUNT)\nexport const onFormUnmount = createFormEffect(LifeCycleTypes.ON_FORM_UNMOUNT)\nexport const onFormValuesChange = createFormEffect(\n  LifeCycleTypes.ON_FORM_VALUES_CHANGE\n)\nexport const onFormInitialValuesChange = createFormEffect(\n  LifeCycleTypes.ON_FORM_INITIAL_VALUES_CHANGE\n)\nexport const onFormInputChange = createFormEffect(\n  LifeCycleTypes.ON_FORM_INPUT_CHANGE\n)\nexport const onFormSubmit = createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT)\nexport const onFormReset = createFormEffect(LifeCycleTypes.ON_FORM_RESET)\nexport const onFormSubmitStart = createFormEffect(\n  LifeCycleTypes.ON_FORM_SUBMIT_START\n)\nexport const onFormSubmitEnd = createFormEffect(\n  LifeCycleTypes.ON_FORM_SUBMIT_END\n)\nexport const onFormSubmitSuccess = createFormEffect(\n  LifeCycleTypes.ON_FORM_SUBMIT_SUCCESS\n)\nexport const onFormSubmitFailed = createFormEffect(\n  LifeCycleTypes.ON_FORM_SUBMIT_FAILED\n)\nexport const onFormSubmitValidateStart = createFormEffect(\n  LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_START\n)\nexport const onFormSubmitValidateSuccess = createFormEffect(\n  LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_SUCCESS\n)\nexport const onFormSubmitValidateFailed = createFormEffect(\n  LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_FAILED\n)\nexport const onFormSubmitValidateEnd = createFormEffect(\n  LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_END\n)\nexport const onFormValidateStart = createFormEffect(\n  LifeCycleTypes.ON_FORM_VALIDATE_START\n)\nexport const onFormValidateSuccess = createFormEffect(\n  LifeCycleTypes.ON_FORM_VALIDATE_SUCCESS\n)\nexport const onFormValidateFailed = createFormEffect(\n  LifeCycleTypes.ON_FORM_VALIDATE_FAILED\n)\nexport const onFormValidateEnd = createFormEffect(\n  LifeCycleTypes.ON_FORM_VALIDATE_END\n)\nexport const onFormGraphChange = createFormEffect(\n  LifeCycleTypes.ON_FORM_GRAPH_CHANGE\n)\nexport const onFormLoading = createFormEffect(LifeCycleTypes.ON_FORM_LOADING)\nexport function onFormReact(callback?: (form: Form) => void) {\n  let dispose = null\n  onFormInit((form) => {\n    dispose = autorun(() => {\n      callback(form)\n    })\n  })\n  onFormUnmount(() => {\n    dispose()\n  })\n}\n", "import { FormPath, isFn, toArr } from '@formily/shared'\nimport { autorun, reaction, batch } from '@formily/reactive'\nimport { Form } from '../models'\nimport {\n  LifeCycleTypes,\n  FormPathPattern,\n  GeneralField,\n  DataField,\n  IFieldState,\n} from '../types'\nimport { createEffectHook, useEffectForm } from '../shared/effective'\nimport { onFormUnmount } from './onFormEffects'\n\nfunction createFieldEffect<Result extends GeneralField = GeneralField>(\n  type: LifeCycleTypes\n) {\n  return createEffectHook(\n    type,\n    (field: Result, form: Form) =>\n      (\n        pattern: FormPathPattern,\n        callback: (field: Result, form: Form) => void\n      ) => {\n        if (\n          FormPath.parse(pattern).matchAliasGroup(field.address, field.path)\n        ) {\n          batch(() => {\n            callback(field, form)\n          })\n        }\n      }\n  )\n}\nconst _onFieldInit = createFieldEffect(LifeCycleTypes.ON_FIELD_INIT)\nexport const onFieldMount = createFieldEffect(LifeCycleTypes.ON_FIELD_MOUNT)\nexport const onFieldUnmount = createFieldEffect(LifeCycleTypes.ON_FIELD_UNMOUNT)\nexport const onFieldValueChange = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALUE_CHANGE\n)\nexport const onFieldInitialValueChange = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_INITIAL_VALUE_CHANGE\n)\nexport const onFieldInputValueChange = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_INPUT_VALUE_CHANGE\n)\nexport const onFieldValidateStart = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALIDATE_START\n)\nexport const onFieldValidateEnd = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALIDATE_END\n)\nexport const onFieldValidating = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALIDATING\n)\nexport const onFieldValidateFailed = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALIDATE_FAILED\n)\nexport const onFieldValidateSuccess = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALIDATE_SUCCESS\n)\nexport const onFieldSubmit = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT\n)\nexport const onFieldSubmitStart = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_START\n)\nexport const onFieldSubmitEnd = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_END\n)\nexport const onFieldSubmitValidateStart = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_START\n)\nexport const onFieldSubmitValidateEnd = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_END\n)\nexport const onFieldSubmitSuccess = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_SUCCESS\n)\nexport const onFieldSubmitFailed = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_FAILED\n)\nexport const onFieldSubmitValidateSuccess = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_SUCCESS\n)\nexport const onFieldSubmitValidateFailed = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_FAILED\n)\nexport const onFieldReset = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_RESET\n)\nexport const onFieldLoading = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_LOADING\n)\n\nexport function onFieldInit(\n  pattern: FormPathPattern,\n  callback?: (field: GeneralField, form: Form) => void\n) {\n  const form = useEffectForm()\n  const count = form.query(pattern).reduce((count, field) => {\n    callback(field, form)\n    return count + 1\n  }, 0)\n  if (count === 0) {\n    _onFieldInit(pattern, callback)\n  }\n}\n\nexport function onFieldReact(\n  pattern: FormPathPattern,\n  callback?: (field: GeneralField, form: Form) => void\n) {\n  const disposers = []\n  onFieldInit(pattern, (field, form) => {\n    disposers.push(\n      autorun(() => {\n        if (isFn(callback)) callback(field, form)\n      })\n    )\n  })\n  onFormUnmount(() => {\n    disposers.forEach((dispose) => {\n      dispose()\n    })\n  })\n}\nexport function onFieldChange(\n  pattern: FormPathPattern,\n  callback?: (field: GeneralField, form: Form) => void\n): void\nexport function onFieldChange(\n  pattern: FormPathPattern,\n  watches: (keyof IFieldState)[],\n  callback?: (field: GeneralField, form: Form) => void\n): void\nexport function onFieldChange(\n  pattern: FormPathPattern,\n  watches: any,\n  callback?: (field: GeneralField, form: Form) => void\n): void {\n  if (isFn(watches)) {\n    callback = watches\n    watches = ['value']\n  } else {\n    watches = watches || ['value']\n  }\n  const disposers = []\n  onFieldInit(pattern, (field, form) => {\n    if (isFn(callback)) callback(field, form)\n    disposers.push(\n      reaction(\n        () => {\n          return toArr(watches).map((key) => {\n            return field[key]\n          })\n        },\n        () => {\n          if (isFn(callback)) callback(field, form)\n        }\n      )\n    )\n  })\n\n  onFormUnmount(() => {\n    disposers.forEach((dispose) => {\n      dispose()\n    })\n  })\n}\n", "export * from './shared/externals'\nexport * from './models/types'\nexport * from './effects'\nexport * from './types'\n", "export {};\n//# sourceMappingURL=types.js.map", "export * from './onFormEffects'\nexport * from './onFieldEffects'\n"],
  "mappings": "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",
  "names": []
}
